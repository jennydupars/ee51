8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLAY
OBJECT MODULE PLACED IN DISPLAY.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE DISPLAY.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1             NAME            DISPLAY
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                                                   DISPLAY          
                                                           ;
                             6     ;                                  Homework 4                                    ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ;
                            12     ; This file contains the functions for displaying strings on the 14-segment
                            13     ; displays.  The functions included are:
                            14     ;   Display        - displays a string to the LED display 
                            15     ;   DisplayNum     - displays a number as a decimal to the LED display
                            16     ;   DisplayHex     - displays a number in hexadecimal to the LED display
                            17     ;   InitDisplay    - initialize the display and its variables
                            18     ;   DisplayMux     - multiplex the LED display
                            19     
                            20     
                            21     ; Revision History:
                            22     ;     10/24/16          Jennifer Du      initial revision
                            23     ;         10/26/16              Jennifer Du              writing assembly code
                            24     ;         10/29/16              Jennifer Du      commenting
                            25     
                            26     
                            27     ;external function declarations
                            28         
                            29         EXTRN   Hex2String:NEAR     ; converts number to hexstring
                            30             EXTRN   Dec2String:NEAR         ; converts number to decstring
                            31             
                            32         EXTRN   ASCIISegTable:BYTE  ; 14-segment codes for segment buffer 
                            33                     
                            34                     
                            35     
                            36     ; include files
                            37 +1  $INCLUDE(display.inc)                   ; include file for display constants
                      =1    38     
                      =1    39     
                      =1    40     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    41     ;                                                                            ;
                      =1    42     ;                                  Display                                   ;
                      =1    43     ;                                Inlude File                                 ;
                      =1    44     ;                                  EE/CS 51                                  ;
                      =1    45     ;                                                                            ;
                      =1    46     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    47     
                      =1    48     ; This file contains the assembly language definitions for the display
                      =1    49     ; functions for homework 4.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    50     
  0008                =1    51     numDigits       EQU     8d                  ; number of LED digits
  0008                =1    52     numSegs         EQU     8d                  ; length of segment buffer
  0010                =1    53     numSegsBytes    EQU     16d                 ; length of segment buffer
                      =1    54     
  0008                =1    55     maxDispLength   EQU     8                   ; maximum display length 
                      =1    56     
                      =1    57     
                      =1    58     ; Specific Digit/LED Definitions
                      =1    59     
  0000                =1    60     LED_BLANK       EQU     00000000B       ;a blank LED            
  FFA4                =1    61     IO_LED_LOC      EQU     0FFA4H          ; I/O location of the LED display
  0000                =1    62     IO_LED_VAL      EQU     0               ; value to write to LED display for correct C
                                   S
                      =1    63     
  0008                =1    64     HIGH_BYTE_ADDRESS       EQU     0008H                   ; I/O location for high byte 
                                   for 14-seg display 
                      =1    65     
                      =1    66     ; ASCII constants
                      =1    67     
  0000                =1    68     ASCII_NULL      EQU     0000H           ; value of null character 
  0020                =1    69     ASCII_BLANK     EQU     ' '
  0000                =1    70     DISPLAY_NULL    EQU             0000H                   ; displaying null character 
                            71 +1  $INCLUDE(common.inc)                    ; for commonly used constants 
                      =1    72     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    73     ;                                                                            ;
                      =1    74     ;                                  COMMON.INC                                ;
                      =1    75     ;                                   EE/CS 51                                 ;
                      =1    76     ;                    Include file for commonly used constants                ;
                      =1    77     ;                                                                            ;
                      =1    78     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    79     
                      =1    80     ; This file contains commonly used constants. 
                      =1    81     
                      =1    82     ; Word and byte size:
                      =1    83     
  0002                =1    84     WORDSIZE        EQU         0002H       ; 1 word is 2 bytes
  0001                =1    85     BYTESIZE        EQU         0001H       ; 1 byte is 1 byte 
                            86     
                            87     
                            88     
                            89     CGROUP  GROUP   CODE
                            90     DGROUP  GROUP   DATA, STACK
                            91     
----                        92     CODE    SEGMENT PUBLIC 'CODE'
                            93     
                            94             ASSUME  CS:CGROUP, DS:DGROUP, SS:STACK
                            95     
                            96                     
                            97     ; Display 
                            98     ;
                            99     ; Description:          This function converts an ASCII string into the 
                           100     ;                                       series of 14-segment codes that, when ported 
                                   to the LED 
                           101     ;                                       display, forms a visual representation of tha
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                                   t string. 
                           102     ;                                       The function is passed a <null> terminated st
                                   ring (str) to
                           103     ;                                       output to the LED display. The string is pass
                                   ed by 
                           104     ;                                       reference in ES:SI. The maximum length of the
                                    string that can be 
                           105     ;                                       displayed at any given moment is 8 characters
                                    long. Anything 
                           106     ;                                       longer than this will be cut off. 
                           107     ;
                           108     ; Operation:            This function will loop through the given string, and look 
                           109     ;                                       up the 14 segment code for each character in 
                                   the 14-segment 
                           110     ;                                       code table. Then it will write the value of t
                                   he 14 segment 
                           111     ;                                       code to the buffer in the order that the char
                                   acters appear. 
                           112     ;                   If the string is shorter than the length of the segment 
                           113     ;                   buffer, the buffer will be padded with blank spaces. If the 
                           114     ;                   string is longer than the length of the segment buffer, it 
                           115     ;                   will be cut off at 8 characters. 
                           116     ;
                           117     ; Arguments:            SI - address of string to be displayed
                           118     ; Return Value:         None. 
                           119     ;
                           120     ; Local Variables:      SI - address of string to be displayed
                           121     ;                                       CX - counter to keep track of current space i
                                   n segment buffer 
                           122     ;                                       AX - stores ASCII value of current character 
                                   being looked up 
                           123     ;                                       BX - temp variable used as index to lookup va
                                   lues in tables 
                           124     ; Shared Variables: segBuffer - place to store the segment code values  
                           125     ; Global Variables: None. 
                           126     ;
                           127     ; Input:                        None. 
                           128     ; Output:                       None.
                           129     ;
                           130     ; Error Handling:       None. 
                           131     ; Registers Used:       Flags, AX, BX, CX, SI.
                           132     ;
                           133     ; Algorithms:           None. 
                           134     ; Data Structures:      The segment buffer is an array of words which holds the 
                           135     ;                                       14-segment code values for each character in 
                                   the string 
                           136     ;                                       
                           137                                             
                           138                                             
0000                       139     Display         PROC    NEAR
                           140                     PUBLIC  Display
                           141                     
0000                       142     StartDisplay:
0000 60                    143         PUSHA                                                       ; save registers 
                           144     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

0001 B90000                145         MOV     CX, 0                       ; initialize counter for the segbuffer
                           146         
0004                       147     CheckEndOfString:
0004 33C0                  148         XOR     AX,AX                                       ; clear AX
0006 268A04                149         MOV     AL, ES:[SI]                 ; get value of the first character in the str
                                   ing 
0009 46                    150             INC     SI                      ; move to next character in string
000A 3C00                  151         CMP     AL, ASCII_NULL          ; see if the string has ended (aka if the current
                           152                                                                                     ; cha
                                   racter is euqal to ASCII_NULL)
000C 741F                  153         JE      EndOfString                         ; if character is null, jump to end o
                                   f the string 
                           154         ;JMP    StoreSegTableValue
                           155         
000E                       156     StoreSegTableValue:
                           157     
000E D1E0                  158         SHL     AX, 1                   ; multiply the ascii character value by 2 (since 
                           159                                                                                     ; eac
                                   h code is 2 bytes long, we want to look up 
                           160                                                                                     ; 2*A
                                   SCII_VAL to get to the right character)
0010 8BD8                  161         MOV     BX, AX                  ; move the ascii value (index in the table) to BX
                                    to access
                           162         
0012 2E8A870000     E      163         MOV     AL, CS:ASCIISegTable[BX]    ; move the code values in byte by byte
0017 43                    164         INC     BX                          ; move to the second part of the display code
                                    pattern
0018 2E8AA70000     E      165         MOV     AH, CS:ASCIISegTable[BX]    ; move in higher byte 
                           166         
001D 8BD9                  167         MOV     BX, CX                  ; move counter for segbuffer here
001F 89870000       R      168         MOV     segBuffer[BX], AX       ; move value into BX
                           169         
0023 83C102                170         ADD     CX, WORDSIZE                        ; increment segBuffer counter to go t
                                   o next empty spot 
0026 83F910                171         CMP     CX, numSegsBytes        ; if we reach capacity of the segment buffer, the
                                   y're equal
0029 7CD9                  172         JL      CheckEndOfString        ; if counter is less than length, store more disp
                                   lay codes
002B 7D10                  173         JGE     EndDisplay                  ; >= means we end this function, buffer can't
                                    fit more
                           174     
002D                       175     EndOfString:                                            ; if we have reached the end 
                                   of the string 
                           176         
002D 8BD9                  177         MOV     BX, CX                              ; move segBuffer counter into BX to a
                                   ccess as index 
                           178         
002F C78700000000   R      179         MOV     segBuffer[BX], DISPLAY_NULL   ; store null string in each entry in segmen
                                   t buffer
0035 83C102                180         ADD     CX, WORDSIZE                                ; increment segBuffer counter
                                    to go to next empty entry 
                           181         ;JMP     CheckEndOfBufferAfterString
                           182         
0038                       183     CheckEndOfBufferAfterString:            ; string is done and we are checking if buffe
                                   r 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           184                                             ; capacity has been reached
0038 83F910                185         CMP     CX, numSegsBytes                    
003B 7CF0                  186         JL      EndOfString                 ; buffer capacity not reached: add more space
                                   s
                           187         ;JGE     EndDisplay                                 ; if buffer capacity has been
                                    reached, end!
                           188         
003D                       189     EndDisplay:
003D 61                    190         POPA                                        ;restore registers 
003E C3                    191         RET                     ; we are done, return
                           192         
                           193     Display ENDP
                           194         
                           195     ;               
                           196     ;
                           197     ; DisplayNum 
                           198     ;
                           199     ; Description:          This function turns a given number into its decimal 
                           200     ;                                       representation and gets it ready to be displa
                                   yed on the 
                           201     ;                                       LED display. The function is passed a 16-bit 
                                   signed value 
                           202     ;                                       (n) to output in decimal (at most 5 digits pl
                                   us sign) to 
                           203     ;                                       the LED display. The number (n) is passed in 
                                   AX by value. 
                           204     ;                   The resulting string is written to DS:SI.
                           205     ;
                           206     ; Operation:            We will use two previously written functions to 
                           207     ;                                       display a number in decimal. First, we will t
                                   urn the given
                           208     ;                                       number into a string in decimal form using De
                                   c2String, and
                           209     ;                                       then we will call Display on this string to s
                                   how it 
                           210     ;                                       on the LED display. The resulting string will
                                    be less than 
                           211     ;                                       the length of the LED, and any unused spaces 
                                   will not display
                           212     ;                                       anything on the LED display. 
                           213     ;
                           214     ; Arguments:            AX - 16-bit signed value to be turned into a decimal string
                           215     ; Return Value:         None.
                           216     ; Local Variables:      AX - number to be displayed
                           217     ;                                       SI - address of string to be displayed 
                           218     ; Shared Variables: segBuffer - place to store the segment code values  
                           219     ;                                       stringBuffer - place to store the string from
                                    Dec2String function 
                           220     ; Global Variables:     None. 
                           221     ; Input:                        None. 
                           222     ; Output:                       None.
                           223     ; Error Handling:       None.
                           224     ; Registers used:       SI, BX, AX. 
                           225     ; Algorithms:           None.
                           226     ; Data Structures:      stringBuffer - stores the characters of the string after conv
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                                   erting 
                           227     ;                                               decimal to string.
                           228     ;
                           229     
003F                       230     DisplayNum      PROC    NEAR
                           231                     PUBLIC  DisplayNum
003F 60                    232         PUSHA
0040 BE220090       R      233         MOV     SI, OFFSET(stringBuffer) ; DS:SI should point to stringBuffer, set this 
                           234                                             ; up so Dec2String can write string there.
0044 8CDB                  235         MOV     BX, DS                                       ; set ES equal to DS for Dis
                                   play function 
0046 8EC3                  236         MOV     ES, BX
                           237     
0048 56                    238         PUSH        SI                                              ; keep Dec2String fro
                                   m changing SI
0049 E80000         E      239             CALL    Dec2String                              ; turns number to decimal str
                                   ing 
004C 5E                    240         POP         SI
                           241         
004D E8B0FF                242             CALL    Display                                 ; calls display on the string
                                     
0050 61                    243         POPA
0051 C3                    244         RET
                           245     DisplayNum      ENDP          
                           246     
                           247     ;
                           248     ;
                           249     ; DisplayHex 
                           250     ;
                           251     ; Description:          This function turns a given number into its hex 
                           252     ;                                       representation and gets it ready to be displa
                                   yed. 
                           253     ;                                       The function is passed a 16-bit unsigned valu
                                   e (n) to 
                           254     ;                                       output in hexadecimal (at most 4 digits) to t
                                   he LED 
                           255     ;                                       display. The number (n) is passed in AX by va
                                   lue. 
                           256     ;                   The resulting string is written to DS:SI.
                           257     ;
                           258     ; Operation:            We will use two previously written functions to 
                           259     ;                                       display a number in hex. First, we will turn 
                                   the given
                           260     ;                                       number into a string in hex form using Hex2St
                                   ring, and
                           261     ;                                       then we will call Display on this string to s
                                   how it 
                           262     ;                                       on the LED display. Any unused digits will sh
                                   ow up as 
                           263     ;                                       blank on the LED display. 
                           264     ;
                           265     ; Arguments:            AX - 16-bit unsigned value to be turned into a hex string
                           266     ;
                           267     ; Return Value:         None.
                           268     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           269     ; Local Variables:      AX - 16-bit unsigned value to be turned into a hex string
                           270     ;                   SI - address of string to be displayed  
                           271     ; Shared Variables: segBuffer - place to store the segment code values  
                           272     ;                                       stringBuffer - place to store the string from
                                    Hex2String function 
                           273     ; Global Variables: None. 
                           274     ; Input:                        None. 
                           275     ; Output:                       None. 
                           276     ; Error Handling:       None. 
                           277     ; Registers used:       SI, BX, AX. 
                           278     ; Algorithms:           None. 
                           279     ; Data Structures:      stringBuffer - string array for storing result of Hex2String 
                           280     ;
0052                       281     DisplayHex      PROC    NEAR
                           282                     PUBLIC  DisplayHex
                           283     
0052 BE220090       R      284         MOV     SI, OFFSET(stringBuffer)    ; set address of SI up so that Hex2String
                           285                                                 ; can write the string here
0056 8CDB                  286         MOV     BX, DS                                              ; set ES equal to DS 
0058 8EC3                  287         MOV     ES, BX
                           288     
005A 56                    289         PUSH        SI                              ; keep Hex2String from changing SI
005B E80000         E      290             CALL    Hex2String              ; converts number to hex string 
005E 5E                    291         POP         SI
                           292         
005F E89EFF                293         CALL    Display             ; displays string on LED display 
0062 C3                    294             RET
                           295     
                           296     DisplayHex      ENDP
                           297     
                           298     
                           299     
                           300     
                           301     ;
                           302     ;
                           303     ;       
                           304     ; InitDisplay 
                           305     ;
                           306     ; Description:          This function initializes the segment buffer, clears 
                           307     ;                                       the display (by clearing the seg buffer), and
                                    
                           308     ;                                       initializes display multiplexing variables. 
                           309     ;
                           310     ; Operation:            This function blanks the digits and initializes the 
                           311     ;                                       display muxing variables. 
                           312     ;
                           313     ; Arguments:            None. 
                           314     ; Return Value:         None.           
                           315     ; Local Variables:      BX - counter for looping through segment buffer
                           316     ; Shared Variables: currentSeg - keeps track of next digit for mux  
                           317     ;                                       segBuffer  - buffer is filled with DISPLAY_BL
                                   ANK
                           318     ; Global Variables: None. 
                           319     ; Input:                        None. 
                           320     ; Output:                       The LED display is blanked.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           321     ; Error Handling:       None.
                           322     ; Registers used:       BX, DX, AX. 
                           323     ; Algorithms:           None.
                           324     ; Data Structures:      Segment buffer (segBuffer) - array of 14-segment display code
                                   s. 
                           325     ;
                           326     
                           327     
0063                       328     InitDisplay     PROC    NEAR
                           329                     PUBLIC  InitDisplay
                           330     
0063                       331     StartInitDisplay:                   
0063 60                    332         PUSHA                           ; save registers
                           333         
0064 BB0000                334         MOV     BX, 0                   ; start counter at 0 (this counter loops through
                           335                                         ; segment buffer and clears each entry)
0067 BAA4FF                336         MOV     DX, IO_LED_LOC          ; get I/O location of LED display 
006A B000                  337         MOV     AL, IO_LED_VAL          ; get I/O value to write to IO_LED_LOC 
006C EE                    338         OUT     DX, AL                  ; write 0 to I/O location 0FFA4H (display chip se
                                   lect)
                           339     
006D                       340     ClearDisplay:                       ;start clearing the display
006D C78700000000   R      341         MOV     segBuffer[BX], LED_BLANK    ; move blank character into each segBuffer en
                                   try
0073 43                    342         INC     BX                      ; increment counter
0074 83FB10                343         CMP     BX, numSegsBytes        ; see if we have reached the end of segment buffe
                                   r
0077 75F4                  344         JNE     ClearDisplay            ; if not, then clear next entry in segment buffer
                           345         ;JE      InitMuxVariables
                           346         
0079                       347     InitMuxVariables:
0079 C70620000000   R      348         MOV     currentSeg, 0                       ; Initialize current mux segment 
                           349         
007F                       350     EndInitDisplay:                     
007F 61                    351         POPA                            ; restore registers and
0080 C3                    352         RET                             ; return
                           353     
                           354     InitDisplay     ENDP
                           355     
                           356     
                           357     
                           358     ;
                           359     ;
                           360     ;
                           361     ;
                           362     ; DisplayMux 
                           363     ;
                           364     ; Description:          Multiplexer for the display. This procedure multiplexes
                           365     ;                                       the LED display under interrupt control. This
                                    
                           366     ;                                       function is going to display 1 digit for 1 in
                                   stance. 
                           367     ;       
                           368     ; Operation:            The multiplexer remembers which digit was called last,
                           369     ;                                       by storing and incrementing the currentSeg va
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                                   riable 
                           370     ;                                       (accounting for wraparound). Then it writes t
                                   he 
                           371     ;                                       14-segment code of the next digit to the disp
                                   lay at the 
                           372     ;                                       current digit. One digit is output each time 
                                   this function
                           373     ;                                       is called.
                           374     ;
                           375     ; Arguments:            None.
                           376     ; Return Value:         None.
                           377     ; Local Variables:      None.
                           378     ; Shared Variables: currentSeg - number that keeps track of which digit is
                           379     ;                                                                       being display
                                   ed
                           380     ;                                       buffer     - segment buffer holding segment c
                                   ode values 
                           381     ; Global Variables: None. 
                           382     ; Input:                        None. 
                           383     ; Output:                       The next digit is output to the display.  
                           384     ; Error Handling:       None. 
                           385     ; Registers used:       AX, BX, CX, DX.
                           386     ; Algorithms:           None. 
                           387     ; Data Structures:      segment buffer - array of bytes holding segment code values 
                           388     ;
                           389     
                           390     
                           391     
0081                       392     DisplayMux                      PROC    NEAR            
                           393                                             PUBLIC  DisplayMux
                           394             
0081                       395     StartDisplayMux:                                         
0081 60                    396         PUSHA                       ; save registers   
                           397         
0082 8B1E2000       R      398         MOV     BX, currentSeg              ; BX will be the lookup index  
0086 D1E3                  399         SHL     BX, 1               ; multiply by 2 since each word-sized display code 
                           400                                                                             ; starts at e
                                   ven indices (every other one)
0088 8B870000       R      401         MOV     AX, WORD PTR segBuffer[BX]
                           402                                                                     ; move display code i
                                   nto AX (word-sized)
                           403         
008C 86E0                  404         XCHG    AH, AL                      ; move higher byte (AH) into AL to display fi
                                   rst 
008E BA0800                405         MOV     DX, HIGH_BYTE_ADDRESS ; higher byte must be ported into 0008H
0091 EE                    406         OUT     DX, AL                              ; display higher byte code 
                           407         
0092 86E0                  408         XCHG    AH, AL              ; now we display lower byte (AL)
                           409                                                                     
0094 8B162000       R      410         MOV     DX, currentSeg      ; display in segBuffer at index currentSeg must be 
                           411                                                                             ; displayed a
                                   t currentSeg address (index in buffer
                           412                                                                             ; is equal to
                                    index on LED display)
0098 EE                    413         OUT     DX, AL                              ; display lower byte display code 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  12:46:37  11/04/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           414         
0099                       415     IncrementMuxCounter:                    ; set number to mux next time 
0099 8B1E2000       R      416         MOV     BX, currentSeg              
009D 43                    417         INC     BX                                  ; increment current segment 
009E 8BC3                  418         MOV     AX, BX                              ; move current segment to AX to divid
                                   e 
00A0 B90800                419         MOV     CX, numSegs         ; get (currentSeg + 1) mod (number of segments)
00A3 F7F1                  420         DIV     CX                  ; to account for mux counter wraparound
00A5 89162000       R      421         MOV     currentSeg, DX              
                           422             
00A9                       423     EndDisplayMux:
00A9 61                    424         POPA                        ; restore registers
00AA C3                    425             RET                                                     ; done multiplexing L
                                   EDs - return
                           426     
                           427     DisplayMux                      ENDP
                           428     
----                       429     CODE    ENDS                                                                   
                           430     
                           431     
                           432     ; the data segment 
                           433     
----                       434     DATA    SEGMENT PUBLIC  'DATA'
                           435     
                           436             ; buffer holding currently displayed pattern
0000 (16                   437     segBuffer               DW              numSegsBytes    DUP     (?) 
     ????
     )
                           438     
                           439         ; current digit to be muxed next 
0020 ????                  440     currentSeg              DW              ?                   
                           441     
                           442             ; character array, stores string before conversion into 14-seg codes 
0022 (16                   443     stringBuffer    DB      numSegsBytes    DUP     (?)   
     ??
     )
                           444                     
----                       445     DATA    ENDS
                           446     
                           447     
                           448     
                           449     ;the stack
                           450     
----                       451     STACK   SEGMENT STACK  'STACK'
                           452     
0000 (80                   453             DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                           454     
01E0                       455             TopOfStack      LABEL   WORD
                           456     
----                       457     STACK   ENDS
                           458     
                           459     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
