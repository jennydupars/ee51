8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE EVTHNDLR
OBJECT MODULE PLACED IN EVTHNDLR.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE EVTHNDLR.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1             NAME            EVTHNDLR
                             2             
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                                                EVENT HANDLERS      
                                                           ;
                             6     ;                                  Homework 4                                    ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This program is an event handler that manages interrupt service routines for 
                            12     ; the procedures for displaying strings on the LED display. The included 
                            13     ; functions are general enough to be used by functions other than the display 
                            14     ; functions. The included functions are: 
                            15     ;   InitTimer - initializes timer 
                            16     ;   InitCS  - initializes chip select
                            17     ;   ClrIRQVectors  - installs IllegalEventHandler for all invalid interrupts 
                            18     ;   IllegalEventHandler - sends EOI to interrupt handler to exit interrupt
                            19     
                            20     
                            21     ; Revision History:
                            22     ;     10/27/16          Jennifer Du      initial revision
                            23     
                            24     ;
                            25     ; external function declarations
                            26     
                            27         EXTRN   TimerEventHandler:NEAR      ; located in tmrhndlr.asm, this function call
                                   s DisplayMux
                            28     
                            29     ;
                            30     ; Include files
                            31 +1  $INCLUDE(handlers.inc)                                  ; include file for event hand
                                   lers, interrupts, and timers 
                      =1    32     
                      =1    33     
                      =1    34     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    35     ;                                                                            ;
                      =1    36     ;                                 HANDLERS.INC                               ;
                      =1    37     ;                                 Include File                               ;
                      =1    38     ;                                                                            ;
                      =1    39     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    40     
                      =1    41     ; Timer Definitions
                      =1    42     
                      =1    43     ; Addresses
  FF56                =1    44     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1    45     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1    46     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1    47     
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    48     ; Control Register Values
  E001                =1    49     Tmr0CtrlVal     EQU     0E001H
                      =1    50                             ;0E009H          ;value to write to Timer 0 Control Register
                      =1    51                                             ;1---------------  enable timer
                      =1    52                                             ;-1--------------  write to control
                      =1    53                                             ;--1-------------  enable interrupts
                      =1    54                                             ;----000000------  reserved
                      =1    55                                             ;---0------0-----  read only
                      =1    56                                             ;-----------0----  TMRIN0 is an enable
                      =1    57                                             ;------------10--  count timer 2 outs
                      =1    58                                             ;--------------0-  single counter mode
                      =1    59                                             ;---------------1  continuous mode
                      =1    60     
                      =1    61     
                      =1    62     ; Interrupt Vectors
  0008                =1    63     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
                      =1    64     
                      =1    65     
                      =1    66     ; Interrupt Controller Definitions
                      =1    67     
                      =1    68     ; Addresses
  FF32                =1    69     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    70     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    71     
                      =1    72     ; Register Values
  0001                =1    73     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    74                                             ;000000000000----  reserved
                      =1    75                                             ;------------0---  enable timer interrupt
                      =1    76                                             ;-------------001  timer priority
  0008                =1    77     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1    78     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1    79     
                      =1    80     
                      =1    81     ; Chip Select Unit Definitions
                      =1    82     
                      =1    83     ; Addresses
  FFA4                =1    84     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1    85     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                      =1    86     
                      =1    87     ; Control Register Values
  0003                =1    88     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1    89                                             ;0000000000------  starts at address 0
                      =1    90                                             ;----------000---  reserved
                      =1    91                                             ;-------------0--  wait for RDY inputs
                      =1    92                                             ;--------------11  3 wait states
  0183                =1    93     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1    94                                             ;0---------000---  reserved
                      =1    95                                             ;-0000001--------  MCS is 8KB
                      =1    96                                             ;--------1-------  output PCS5/PCS6
                      =1    97                                             ;---------0------  PCS in I/O space
                      =1    98                                             ;-------------0--  wait for RDY inputs
                      =1    99                                             ;--------------11  3 wait states
                      =1   100     
                      =1   101     
                      =1   102     
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   103     ; Timing Definitions
                      =1   104     
  0900                =1   105     COUNTS_PER_MS   EQU     2304            ;number of timer counts per 1 ms (assumes 18.
                                   432 MHz clock)
  00C8                =1   106     MS_PER_SEG      EQU     200             ;number of ms for each segment
                      =1   107     
                      =1   108     
                      =1   109     
                      =1   110     ; General Definitions
                      =1   111     
  0001                =1   112     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   113     LAST_RESERVED_VEC       EQU     3
  0100                =1   114     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   115     
  0080                =1   116     LEDDisplay      EQU     0080H           ;display address
                      =1   117     
  0008                =1   118     NUM_DIGITS      EQU     8               ;number of digits in the display
                           119     
                           120     CGROUP  GROUP   CODE
                           121     
----                       122     CODE    SEGMENT PUBLIC 'CODE'
                           123     
                           124             ASSUME  CS:CGROUP
                           125                                                                     
                           126     ;       
                           127     ;       
                           128     ;
                           129     ; InitTimer  
                           130     ;
                           131     ; Description:          This function will initialize the timer. The 
                           132     ;                                       timer will be initialized to generate interru
                                   pts every
                           133     ;                                       MS_PER_SEG milliseconds. The interrupt contro
                                   ller is 
                           134     ;                                       also initialized here to allow the timer inte
                                   rrupts. 
                           135     ;                                       The timer counts MS_PER_SEG long intervals to
                                    generate 
                           136     ;                                       the interrupts. This function is based on Gle
                                   n's code. 
                           137     ;
                           138     ; Operation:            The appropriate values are written to the timer control 
                           139     ;                                       registers in the PCB. The timer count registe
                                   rs are set 
                           140     ;                                       to zero. The interrupt controller is set up t
                                   o accept 
                           141     ;                                       timer interrupts and any pending interrupts a
                                   re cleared
                           142     ;                                       by sending a TimerEOI to the interrupt contro
                                   ller. 
                           143     ;       
                           144     ; Arguments:            None.
                           145     ; Return Value:         None.
                           146     ; Local Variables:      None.
                           147     ; Shared Variables: None. 
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           148     ; Global Variables: None.
                           149     ; Input:                        None. 
                           150     ; Output:                       None.
                           151     ; Error Handling:       None.
                           152     ; Algorithms:           None.
                           153     ; Data Structures:      None.
                           154     ;
0000                       155     InitTimer       PROC    NEAR
                           156                     PUBLIC  InitTimer
                           157            
                           158     
                           159                                     ;initialize Timer #0 for MS_PER_SEG ms interrupts
0000 BA50FF                160             MOV     DX, Tmr0Count   ;initialize the count register to 0
0003 33C0                  161             XOR     AX, AX
0005 EE                    162             OUT     DX, AL
                           163     
0006 BA52FF                164             MOV     DX, Tmr0MaxCntA ;setup max count for milliseconds per segment
0009 B8C800                165             MOV     AX, MS_PER_SEG  ;   count so can time the segments
000C EE                    166             OUT     DX, AL
                           167     
000D BA56FF                168             MOV     DX, Tmr0Ctrl    ;setup the control register, interrupts on
0010 B801E0                169             MOV     AX, Tmr0CtrlVal
0013 EE                    170             OUT     DX, AL
                           171     
                           172                                     ;initialize interrupt controller for timers
0014 BA32FF                173             MOV     DX, INTCtrlrCtrl;setup the interrupt control register
0017 B80100                174             MOV     AX, INTCtrlrCVal
001A EE                    175             OUT     DX, AL
                           176     
001B BA22FF                177             MOV     DX, INTCtrlrEOI ;send a timer EOI (to clear out controller)
001E B80800                178             MOV     AX, TimerEOI
0021 EE                    179             OUT     DX, AL
                           180     
                           181     
0022 C3                    182             RET                     ;done so return
                           183     
                           184     
                           185     InitTimer       ENDP
                           186     
                           187     
                           188     ;       
                           189     ;       
                           190     ;       
                           191     ; InitCS  
                           192     ;
                           193     ; Description:          This function will initialize the peripheral chip 
                           194     ;                                       selects on the 80188. Based on Glen's code. 
                           195     ;
                           196     ; Operation:            This writes the initial values to the PACS and 
                           197     ;                                       MPCS registers.
                           198     ;
                           199     ; Arguments:            None. 
                           200     ; Return Value:         None. 
                           201     ; Local Variables:      None. 
                           202     ; Shared Variables: None. 
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           203     ; Global Variables: None.
                           204     ; Input:                        None. 
                           205     ; Output:                       None. 
                           206     ; Error Handling:       None. 
                           207     ; Algorithms:           None. 
                           208     ; Data Structures:      None. 
                           209     ;
                           210     
                           211     
0023                       212     InitCS  PROC    NEAR
                           213             PUBLIC  InitCS
                           214     
0023 BAA4FF                215             MOV     DX, PACSreg     ;setup to write to PACS register
0026 B80300                216             MOV     AX, PACSval
0029 EE                    217             OUT     DX, AL          ;write PACSval to PACS (base at 0, 3 wait states)
                           218     
002A BAA8FF                219             MOV     DX, MPCSreg     ;setup to write to MPCS register
002D B88301                220             MOV     AX, MPCSval
0030 EE                    221             OUT     DX, AL          ;write MPCSval to MPCS (I/O space, 3 wait states)
                           222     
                           223     
0031 C3                    224             RET                     ;done so return
                           225     
                           226     InitCS  ENDP
                           227     
                           228     ;       
                           229     ; ClrIRQVectors  
                           230     ;
                           231     ; Description:          This functions installs the IllegalEventHandler for all
                           232     ;                       interrupt vectors in the interrupt vector table.  Note
                           233     ;                       that all 256 vectors are initialized so the code must be
                           234     ;                   located above 400H.  The initialization skips  (does not
                           235     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           236     ;                   LAST_RESERVED_VEC. This code is modelled after Glen's code.
                           237     ;
                           238     ; Arguments:            None.
                           239     ; Return Value:         None.
                           240     ;
                           241     ; Local Variables:      CX - vector counter 
                           242     ;                                       ES:SI - pointer to vector table 
                           243     ; Shared Variables: None.
                           244     ; Global Variables: None.
                           245     ; Input:                        None. 
                           246     ; Output:                       None. 
                           247     ; Error Handling:       None.
                           248     ; Algorithms:           None. 
                           249     ; Data Structures:      None. 
                           250     ;
0032                       251     ClrIRQVectors   PROC    NEAR
                           252                     PUBLIC  ClrIRQVectors
                           253     
0032                       254     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           255     
0032 33C0                  256             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0034 8EC0                  257             MOV     ES, AX
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

0036 BE0000                258             MOV     SI, 0           ;initialize SI to the first vector
                           259     
0039 B90001                260             MOV     CX, 256         ;up to 256 vectors to initialize
                           261     
                           262     
003C                       263     ClrVectorLoop:                  ;loop clearing each vector
                           264                                     ;check if should store the vector
003C 83FE04                265             CMP     SI, 4 * FIRST_RESERVED_VEC
003F 7205                  266             JB      DoStore         ;if before start of reserved field - store it
0041 83FE0C                267             CMP     SI, 4 * LAST_RESERVED_VEC
0044 760B                  268             JBE     DoneStore       ;if in the reserved vectors - don't store it
                           269             ;JA     DoStore         ;otherwise past them - so do the store
                           270     
0046                       271     DoStore:                        ;store the vector
0046 26C7045700     R      272             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
004B 26C74402----   R      273             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           274     
0051                       275     DoneStore:                      ;done storing the vector
0051 83C604                276             ADD     SI, 4           ;update pointer to next vector
                           277     
0054 E2E6                  278             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           279             ;JMP    EndClrIRQVectors;and all done
                           280     
                           281     
0056                       282     EndClrIRQVectors:               ;all done, return
0056 C3                    283             RET
                           284     
                           285     
                           286     ClrIRQVectors   ENDP
                           287                                                             
                           288                                                             
                           289                                                             
                           290     ;
                           291     ;                               
                           292     ;                               
                           293     ; IllegalEventHandler 
                           294     ;
                           295     ; Description:          This function will be modelled after Glen's code. This  
                           296     ;                                       function is the event handler for illegal (un
                                   initialized)
                           297     ;                                       interrupts. It is called when an illegal inte
                                   rrupt occurs.
                           298     ;
                           299     ; Operation:            When this function is called, nothing happens, except that
                           300     ;                                       it sends a non-specific EOI and returns. 
                           301     ;
                           302     ; Arguments:            None.
                           303     ; Return Value:         None. 
                           304     ; Local Variables:      None.
                           305     ; Shared Variables: None.
                           306     ; Global Variables: None.
                           307     ; Input:                        None. 
                           308     ; Output:                       None. 
                           309     ; Error Handling:       None.
                           310     ; Algorithms:           None.
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 12:46:37  11/04/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           311     ; Data Structures:      None.
                           312     
0057                       313     IllegalEventHandler     PROC    NEAR
                           314                             PUBLIC  IllegalEventHandler
                           315     
0057 90                    316             NOP                             ;do nothing (can set breakpoint here)
                           317     
0058 50                    318             PUSH    AX                      ;save the registers
0059 52                    319             PUSH    DX
                           320     
005A BA22FF                321             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
005D B80080                322             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
0060 EE                    323             OUT     DX, AL                  ;   the interrupt that got us here
                           324     
0061                       325     EndIllegalEventHandler:
0061 5A                    326             POP     DX                      ;restore the registers
0062 58                    327             POP     AX
                           328     
0063 CF                    329             IRET                            ;and return
                           330     
                           331     
                           332     IllegalEventHandler     ENDP
                           333     
----                       334     CODE        ENDS
                           335     
                           336         END

ASSEMBLY COMPLETE, NO ERRORS FOUND
