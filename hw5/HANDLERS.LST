8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 17:02:42  11/04/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE EVTHNDLR
OBJECT MODULE PLACED IN HANDLERS.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE HANDLERS.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1             NAME            EVTHNDLR
                             2             
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                                                EVENT HANDLERS      
                                                           ;
                             6     ;                                  Homework 5                                    ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This file includes functions that handle interrupts and timing for the keypad. 
                            12     ; The included functions are: 
                            13     ;       TimerEventHandler - calls KeypadMux at interrupts to repeatedly check for inp
                                   ut 
                            14     ;       InstallTimerHandler - installs timer event handler for the timer interrupt 
                            15     
                            16     ; Revision History:
                            17     ;     11/02/16          Jennifer Du      initial revision
                            18     
                            19         
                            20     ; include files 
                            21 +1  $INCLUDE(handlers.inc)                                  ; include file for handlers, 
                                   interrupts, timers 
                      =1    22     
                      =1    23     
                      =1    24     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    25     ;                                                                            ;
                      =1    26     ;                                 HANDLERS.INC                               ;
                      =1    27     ;                                 Include File                               ;
                      =1    28     ;                                                                            ;
                      =1    29     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    30     
                      =1    31     ; Interrupt Controller Definitions
                      =1    32     
                      =1    33     ; Addresses
  FF32                =1    34     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    35     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    36     
                      =1    37     ; Register Values
  0001                =1    38     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    39                                             ;000000000000----  reserved
                      =1    40                                             ;------------0---  enable timer interrupt
                      =1    41                                             ;-------------001  timer priority
  0008                =1    42     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1    43     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1    44     
                      =1    45     
                      =1    46     ; Chip Select Unit Definitions
                      =1    47     
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 17:02:42  11/04/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    48     ; Addresses
  FFA4                =1    49     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1    50     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                      =1    51     
                      =1    52     ; Control Register Values
  0003                =1    53     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1    54                                             ;0000000000------  starts at address 0
                      =1    55                                             ;----------000---  reserved
                      =1    56                                             ;-------------0--  wait for RDY inputs
                      =1    57                                             ;--------------11  3 wait states
  0183                =1    58     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1    59                                             ;0---------000---  reserved
                      =1    60                                             ;-0000001--------  MCS is 8KB
                      =1    61                                             ;--------1-------  output PCS5/PCS6
                      =1    62                                             ;---------0------  PCS in I/O space
                      =1    63                                             ;-------------0--  wait for RDY inputs
                      =1    64                                             ;--------------11  3 wait states
                      =1    65     
                      =1    66     
                      =1    67     
                      =1    68     ; General Definitions
                      =1    69     
  0001                =1    70     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1    71     LAST_RESERVED_VEC       EQU     3
  0100                =1    72     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                            73 +1  $INCLUDE(keypad.inc)
                      =1    74     
                      =1    75     
                      =1    76     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    77     ;                                                                            ;
                      =1    78     ;                                   Keypad                                   ;
                      =1    79     ;                                Inlude File                                 ;
                      =1    80     ;                                  EE/CS 51                                  ;
                      =1    81     ;                                                                            ;
                      =1    82     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    83     
                      =1    84     ; This file contains the assembly language definitions for the keypad
                      =1    85     ; functions for homework 5.
                      =1    86     
                      =1    87     ; Input locations (read keypad input from here)
                      =1    88     
  FFA8                =1    89     IO_KEYPAD_LOC   EQU     0FFA8H          ; IO location of the keypad 
  0183                =1    90     IO_KEYPAD_VAL   EQU     00183H          ; value to write to keypad location for corre
                                   ct CS 
                      =1    91     
                      =1    92     
                      =1    93     ; Reading from these locs will give us the keys pressed in each row in the lowest nib
                                   ble
                      =1    94     
  0080                =1    95     KEYPAD_LOC              EQU     080H            ; port number to read from (not inclu
                                   ding offset)
                      =1    96     
  03E8                =1    97     REPEAT_TIME     EQU     1000D           ; 12288 iterations 
  0050                =1    98     PRESS_TIME              EQU     0050H           ; 500 iterations
                      =1    99     
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 17:02:42  11/04/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

  000F                =1   100     KEY_MASK                EQU     000FH           ; will get last 4 bits of keypad valu
                                   e  
                      =1   101      
  0004                =1   102     NUM_ROWS                EQU     0004H           ; there are 4 rows 
                      =1   103     
  000F                =1   104     UNPRESSED_KEY   EQU     000FH           ; value when no key is pressed 
                      =1   105     
  0001                =1   106     KEY_PRESS_EVENT EQU     0001H           ; value stored in AH indicating key event 
                           107     
                           108     
                           109     CGROUP  GROUP   CODE
                           110     
----                       111     CODE    SEGMENT PUBLIC 'CODE'
                           112     
                           113             ASSUME  CS:CGROUP
                           114         
                           115         
                           116     
                           117     ;       
                           118     ; ClrIRQVectors  
                           119     ;
                           120     ; Description:          This functions installs the IllegalEventHandler for all
                           121     ;                       interrupt vectors in the interrupt vector table.  Note
                           122     ;                       that all 256 vectors are initialized so the code must be
                           123     ;                   located above 400H.  The initialization skips  (does not
                           124     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           125     ;                   LAST_RESERVED_VEC. This code is modelled after Glen's code.
                           126     ;
                           127     ; Arguments:            None.
                           128     ; Return Value:         None.
                           129     ;
                           130     ; Local Variables:      CX - vector counter 
                           131     ;                                       ES:SI - pointer to vector table 
                           132     ; Shared Variables: None.
                           133     ; Global Variables: None.
                           134     ; Input:                        None. 
                           135     ; Output:                       None. 
                           136     ; Error Handling:       None.
                           137     ; Algorithms:           None. 
                           138     ; Data Structures:      None. 
                           139     ;
0000                       140     ClrIRQVectors   PROC    NEAR
                           141                     PUBLIC  ClrIRQVectors
                           142     
0000                       143     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           144     
0000 33C0                  145             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0002 8EC0                  146             MOV     ES, AX
0004 BE0000                147             MOV     SI, 0           ;initialize SI to the first vector
                           148     
0007 B90001                149             MOV     CX, 256         ;up to 256 vectors to initialize
                           150     
                           151     
000A                       152     ClrVectorLoop:                  ;loop clearing each vector
                           153                                     ;check if should store the vector
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 17:02:42  11/04/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

000A 83FE04                154             CMP     SI, 4 * FIRST_RESERVED_VEC
000D 7205                  155             JB      DoStore         ;if before start of reserved field - store it
000F 83FE0C                156             CMP     SI, 4 * LAST_RESERVED_VEC
0012 760B                  157             JBE     DoneStore       ;if in the reserved vectors - don't store it
                           158             ;JA     DoStore         ;otherwise past them - so do the store
                           159     
0014                       160     DoStore:                        ;store the vector
0014 26C7042500     R      161             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
0019 26C74402----   R      162             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           163     
001F                       164     DoneStore:                      ;done storing the vector
001F 83C604                165             ADD     SI, 4           ;update pointer to next vector
                           166     
0022 E2E6                  167             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           168             ;JMP    EndClrIRQVectors;and all done
                           169     
                           170     
0024                       171     EndClrIRQVectors:               ;all done, return
0024 C3                    172             RET
                           173     
                           174     
                           175     ClrIRQVectors   ENDP
                           176                                                             
                           177                                                             
                           178                                                             
                           179     ;
                           180     ;                               
                           181     ;                               
                           182     ; IllegalEventHandler 
                           183     ;
                           184     ; Description:          This function will be modelled after Glen's code. This  
                           185     ;                                       function is the event handler for illegal (un
                                   initialized)
                           186     ;                                       interrupts. It is called when an illegal inte
                                   rrupt occurs.
                           187     ;
                           188     ; Operation:            When this function is called, nothing happens, except that
                           189     ;                                       it sends a non-specific EOI and returns. 
                           190     ;
                           191     ; Arguments:            None.
                           192     ; Return Value:         None. 
                           193     ; Local Variables:      None.
                           194     ; Shared Variables: None.
                           195     ; Global Variables: None.
                           196     ; Input:                        None. 
                           197     ; Output:                       None. 
                           198     ; Error Handling:       None.
                           199     ; Algorithms:           None.
                           200     ; Data Structures:      None.
                           201     
0025                       202     IllegalEventHandler     PROC    NEAR
                           203                             PUBLIC  IllegalEventHandler
                           204     
0025 90                    205             NOP                             ;do nothing (can set breakpoint here)
                           206     
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 17:02:42  11/04/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

0026 50                    207             PUSH    AX                      ;save the registers
0027 52                    208             PUSH    DX
                           209     
0028 BA22FF                210             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
002B B80080                211             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
002E EE                    212             OUT     DX, AL                  ;   the interrupt that got us here
                           213     
002F                       214     EndIllegalEventHandler:
002F 5A                    215             POP     DX                      ;restore the registers
0030 58                    216             POP     AX
                           217     
0031 CF                    218             IRET                            ;and return
                           219     
                           220     
                           221     IllegalEventHandler     ENDP
                           222     
                           223     
----                       224     CODE        ENDS
                           225        
                           226         END

ASSEMBLY COMPLETE, NO ERRORS FOUND
