8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE QUEUE
OBJECT MODULE PLACED IN QUEUE.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE QUEUE.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1         NAME    QUEUE
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                QUEUE ROUTINES                              ;
                             6     ;                           Queue Routine Functions                          ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     
                            12     
                            13     ; Contains 5 queue routines: QueueInit, QueueEmpty, QueueFull, Dequeue, Enqueue. 
                            14     ;   QueueInit   - initializes the queue based on the arguments given  
                            15     ;   QueueEmpty  - determines if queue is empty 
                            16     ;   QueueFull   - determines if queue is full
                            17     ;   Dequeue     - remove element from head of queue
                            18     ;   Enqueue     - add element to tail of queue
                            19     ;
                            20     ;
                            21     ; Revision History:
                            22     ;     10/17/16          Jennifer Du      initial revision
                            23     ;     10/19/16      Jennifer Du      writing assembly code
                            24     
                            25     ; include files
                            26 +1  $INCLUDE(queue.inc)
                      =1    27     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    28     ;                                                                            ;
                      =1    29     ;                              QUEUEFUNCTIONS.INC                            ;
                      =1    30     ;                           Queue Routine Functions                          ;
                      =1    31     ;                                 Include File                               ;
                      =1    32     ;                                                                            ;
                      =1    33     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    34     
                      =1    35     ; This file contains the variable declarations for the queue functions 
                      =1    36     ; QueueInit, QueueEmpty, QueueFull, Dequeue, and Enqueue.
                      =1    37     
                      =1    38     
  0001                =1    39     BYTEorWORD      EQU     0001H         ; if 1, it's a byte, if 0, word. 
  00FF                =1    40     ARRAY_MOD_OP    EQU     00FFH
  0100                =1    41     ARRAY_SIZE      EQU     0100H
                      =1    42     
----                  =1    43     qStruc  STRUC
0000                  =1    44         array       DB      ARRAY_SIZE      DUP     (?)
0100                  =1    45         tail        DW      ?
0102                  =1    46         head        DW      ?
0104                  =1    47         elsize      DW      ?
----                  =1    48     qStruc  ENDS
                      =1    49     
                      =1    50          
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            51 +1  $INCLUDE(common.inc)
                      =1    52     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    53     ;                                                                            ;
                      =1    54     ;                                  COMMON.INC                                ;
                      =1    55     ;                                   EE/CS 51                                 ;
                      =1    56     ;                    Include file for commonly used constants                ;
                      =1    57     ;                                                                            ;
                      =1    58     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    59     
                      =1    60     ; This file contains commonly used constants. 
                      =1    61     
                      =1    62     ; Word and byte size:
                      =1    63     
  0002                =1    64     WORDSIZE        EQU         0002H       ; 1 word is 2 bytes
  0001                =1    65     BYTESIZE        EQU         0001H       ; 1 byte is 1 byte 
                            66     
                            67     CGROUP      GROUP       CODE
                            68     
----                        69     CODE        SEGMENT     PUBLIC   'CODE'
                            70     
                            71                 ASSUME      CS:CGROUP
                            72     
                            73             
                            74     
                            75     ; QueueInit
                            76     ;
                            77     ; Description:          Initialize the queue of the passed element size
                            78     ;                                       at the passed address. This procedure does al
                                   l the 
                            79     ;                                       necessary initialization to prepare the queue
                                    for use. 
                            80     ;                                       After calling this procedure the queue should
                                    be empty 
                            81     ;                                       and ready to accept values. The maximum numbe
                                   r of items that 
                            82     ;                   can be stored in the queue will be 256.  
                            83     ;                                       The passed element size specifies whether eac
                                   h entry in 
                            84     ;                                       the queue is a byte or a word. If it is 
                            85     ;                                       true (non-zero) the elements are words and if
                                    it is false 
                            86     ;                                       (zero) they are bytes. The address is passed 
                                   in SI by value 
                            87     ;                                       (thus the queue starts at DS:SI) and the elem
                                   ent size is
                            88     ;                   passed by value in BL.
                            89     ;
                            90     ; Operation:            Set the STRUC's values according to the values passed into 
                            91     ;                                       the function:
                            92     ;                                       elsize - the size of elements to be put in 
                            93     ;                                                 (size = 1 means word, size = 0 mean
                                   s byte)
                            94     ;                                       head - holds the address of the first element
                                    
                            95     ;                                       tail - holds the address of the spot after th
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                                   e last element
                            96     ;
                            97     ; Arguments:            SI - address passed in by the function
                            98     ;                                       BL - size of element (bytes or words)
                            99     ; Return Value:         None. 
                           100     ;
                           101     ; Local Variables:      SI - address passed in by the function
                           102     ;                                       BL - size of element (bytes or words)
                           103     ;                   AL - size of element (in bytes)
                           104     ;
                           105     ; Shared Variables: The STRUC is called qStruc, and the queue is called queue. 
                           106     ;                                       elsize (DB) - the size of elements it holds (
                                   in bytes)
                           107     ;                                       head (DW) - holds the address of the first el
                                   ement 
                           108     ;                                       tail (DW) - holds the address of spot after l
                                   ast element
                           109     ;
                           110     ; Global Variables: None. 
                           111     ;
                           112     ; Input:                        None. 
                           113     ; Output:                       None. 
                           114     ;
                           115     ; Error Handling:       None. 
                           116     ;
                           117     ; Algorithms:           None. 
                           118     ; Data Structures:      STRUC: has properties length, size, address, head pointer,
                           119     ;                                       and tail pointer
                           120     ;                   alength  - the maximum number of elements that can be stored
                           121     ;                                       elsize  - the size of elements to be put in (
                                   words or bytes)
                           122     ;                                       head    - address of the first element 
                           123     ;                                       tail    - address of the spot after the last 
                                   element
                           124     ;
                           125     
                           126     
0000                       127     QueueInit   PROC    NEAR
                           128                 PUBLIC  QueueInit
                           129     
                           130     
0000                       131     SetSize:
0000 8AC3                  132         MOV AL, BL              ; put given size into AL
0002 3C01                  133         CMP AL, BYTEorWORD      ; see if size = 1 or = 0
0004 7409                  134         JZ SizeIsWord
                           135         ;JNZ SizeIsByte 
                           136     
0006                       137     SizeIsByte:
0006 B001                  138         MOV AL, BYTESIZE        ; set the size = 1 byte 
0008 89840401              139         MOV [SI].elsize, AX 
000C EB0790                140         JMP SetHeadPTR
                           141         
000F                       142     SizeIsWord:
000F B002                  143         MOV AL, WORDSIZE        ; set the size = 2 bytes
0011 89840401              144         MOV [SI].elsize, AX 
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           145         ;JMP SetHeadPTR 
                           146         
0015                       147     SetHeadPTR:
0015 C78402010000          148         MOV [SI].head, 0000H   ; set it to 0
                           149     
001B                       150     SetTailPTR:
001B C78400010000          151         MOV [SI].tail, 0000H   ; set it to 0
                           152     
0021 C3                    153         RET 
                           154     QueueInit   ENDP
                           155     
                           156     
                           157     
                           158     
                           159     ; QueueEmpty
                           160     ;
                           161     ; Description:          The function is called with the address (a) of the queue to
                           162     ;                                       be checked and returns with the zero flag set
                                    if the queue 
                           163     ;                                       is empty and with the zero flag reset otherwi
                                   se. The address 
                           164     ;                                       (a) is passed in (SI) by value (thus the queu
                                   e starts at 
                           165     ;                                       (DS:SI).
                           166     ;
                           167     ; Operation:            Compare the addresses of the tail pointer and head pointer. 
                           168     ;                                       If their difference is 0, then that means the
                                    the queue is 
                           169     ;                                       empty. 
                           170     ;                       
                           171     ; Arguments:            SI - address of queue to be checked
                           172     ; Return Value:         ZF - set to 1 if queue is empty, 0 if not.
                           173     ;
                           174     ; Local Variables:      AX - address of head pointer
                           175     ; 
                           176     ; Shared Variables: The STRUC is called qStruc, and the queue is called queue. 
                           177     ;                                       elsize (DB) - the size of elements it holds (
                                   in bytes)
                           178     ;                                       head (DW) - holds the address of the first el
                                   ement 
                           179     ;                                       tail (DW) - holds the address of spot after l
                                   ast element
                           180     ;
                           181     ; Global Variables:     None. 
                           182     ;
                           183     ; Input:                        None. 
                           184     ; Output:                       None.
                           185     ;
                           186     ; Error Handling:       None.
                           187     ;
                           188     ; Algorithms:           Compare the tail and head pointer. If they're the same, 
                           189     ;                                       there are no elements and the ZF will be set.
                                    
                           190     ;
                           191     ; Data Structures:      STRUC: has properties length, size, address, head pointer,
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           192     ;                                       and tail pointer
                           193     ;                   alength  - the maximum number of elements that can be stored
                           194     ;                                       elsize  - the size of elements to be put in (
                                   words or bytes)
                           195     ;                                       head    - address of the first element 
                           196     ;                                       tail    - address of the spot after the last 
                                   element
                           197     ;
                           198     
0022                       199     QueueEmpty  PROC    NEAR
                           200                 PUBLIC  QueueEmpty
                           201     
0022                       202     QueueEmptyInit:
                           203     
0022 8B840201              204         MOV AX, [SI].head      ; move head's value into AX
0026 3B840001              205         CMP AX, [SI].tail      ; if values are equal, zero flag is set
                           206     
002A C3                    207         RET 
                           208     QueueEmpty  ENDP        
                           209     
                           210     
                           211     ;
                           212     ;
                           213     ; QueueFull
                           214     ;
                           215     ; Description:          The function is called with the address of the queue to be
                           216     ;                                       checked and returns with the zero flag set if
                                    the queue is 
                           217     ;                                       full and with the zero flag reset otherwise. 
                                   The address is
                           218     ;                                       passed in by value (thus the queue starts at 
                                   DS:SI).
                           219     ;
                           220     ; Operation:            We will add 1 to the tail pointer, mod it by the length, and 
                           221     ;                                       see if it is equal to the head pointer. This 
                                   takes care of 
                           222     ;                                       queue wraparound.
                           223     ;
                           224     ; Arguments:            SI - address of the queue to be checked
                           225     ; Return Value:         ZF - set if queue is full, clear otherwise. 
                           226     ;
                           227     ; Local Variables:      CX - length of queue
                           228     ;                   AX - tail pointer 
                           229     ;                   DX - value of (tail + 1) mod length
                           230     ; 
                           231     ; Shared Variables: The STRUC is called qStruc, and the queue is called queue. 
                           232     ;                                       elsize (DB) - the size of elements it holds (
                                   in bytes)
                           233     ;                                       head (DW) - holds the address of the first el
                                   ement 
                           234     ;                                       tail (DW) - holds the address of spot after l
                                   ast element
                           235     ;
                           236     ; Global Variables: None. 
                           237     ;
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           238     ; Input:                        None. 
                           239     ; Output:                       None. 
                           240     ;
                           241     ; Error Handling:       None. 
                           242     ;
                           243     ; Algorithms:           Add 1 to the tail pointer, and mod it by length of queue. 
                           244     ;                                       If the tail pointer is then equal to the head
                                   , then the 
                           245     ;                                       queue is full. 
                           246     ;
                           247     ; Data Structures:      STRUC: has properties length, size, address, head pointer,
                           248     ;                                       and tail pointer
                           249     ;                   alength  - the maximum number of elements that can be stored
                           250     ;                                       elsize  - the size of elements to be put in (
                                   words or bytes)
                           251     ;                                       head    - address of the first element 
                           252     ;                                       tail    - address of the spot after the last 
                                   element
                           253     ; 
                           254     ;
                           255     
                           256     
002B                       257     QueueFull   PROC    NEAR
                           258                 PUBLIC  QueueFull
                           259     
002B                       260     QueueFullInit:
                           261         ;MOV CX, [SI].alength        ; not necessary if we can directly DIV AX by length
002B 8B840001              262         MOV AX, [SI].tail          ; move tailPTR into AX so we can operate on it
                           263                                     ; without changing value of tailPTR
                           264     
002F 03840401              265         ADD AX, [SI].elsize         ; increment tailPTR's value to point to next spot
                           266     ;       MOV DX, 0                                       ; clear so you can divide
                           267     ;       DIV [SI].alength       ; divide (tailPTR + size) by length of queue
                           268                                     ; DX contains remainder (x mod length = DX)
0033 25FF00                269             AND AX, ARRAY_SIZE-1
0036 3B840201              270             CMP AX, [SI].head         ; if they are equal, then the queue is full.
                           271     
003A C3                    272         RET 
                           273     QueueFull   ENDP  
                           274     
                           275     
                           276     
                           277     ;
                           278     ;
                           279     ;
                           280     ;
                           281     ; Dequeue
                           282     ;
                           283     ; Description:          This function removes either an 8-bit value or a 
                           284     ;                                       16-bit value (depending on the queue's elemen
                                   t size) 
                           285     ;                                       from the head of the queue at the passed addr
                                   ess (a) 
                           286     ;                                       and returns it in AL or AX. The value is retu
                                   rned in 
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           287     ;                                       AL if the element size is bytes and in AX if 
                                   it is words. 
                           288     ;                                       If the queue is empty it waits until the queu
                                   e has a 
                           289     ;                                       value to be removed and returned. It does not
                                    return 
                           290     ;                                       until a value is taken from the queue. The ad
                                   dress (a)
                           291     ;                                       is passed in SI by value (thus the queue star
                                   ts at DS:SI).
                           292     ;
                           293     ; Operation:            Return the value by storing first element into AX (if word 
                           294     ;                   sized) or AL (if byte sized), and then increment the head 
                           295     ;                   pointer (mod length of queue if there is wraparound).
                           296     ;
                           297     ; Arguments:            SI - address of the queue to be checked
                           298     ; Return Value:         AL or AX - the first thing in line
                           299     ;
                           300     ; Local Variables:      Shared. 
                           301     ; Shared Variables: The STRUC is called qStruc, and the queue is called queue. 
                           302     ;                                       elsize (DB) - the size of elements it holds (
                                   in bytes)
                           303     ;                                       head (DW) - holds the address of the first el
                                   ement 
                           304     ;                                       tail (DW) - holds the address of spot after l
                                   ast element
                           305     ;                                       
                           306     ; Global Variables:     None. 
                           307     ;
                           308     ; Input:                        None.
                           309     ; Output:                       None.
                           310     ;
                           311     ; Error Handling:       None. 
                           312     ;
                           313     ; Algorithms:           We will return the value at the head of the queue, and move
                           314     ;                                       the head pointer up a spot. 
                           315     ;
                           316     ; Data Structures:      STRUC: has properties length, size, address, head pointer,
                           317     ;                                       and tail pointer
                           318     ;                   alength - the maximum number of elements that can be stored
                           319     ;                                       elsize  - the size of elements to be put in (
                                   words or bytes)
                           320     ;                                       head    - address of the first element 
                           321     ;                                       tail    - address of the spot after the last 
                                   element
                           322     ;
                           323     ;
                           324     
003B                       325     Dequeue     PROC    NEAR
                           326                 PUBLIC  Dequeue
                           327                 
003B                       328     DequeueInit:
                           329         
003B                       330     IfQueueIsEmpty:
003B E8E4FF                331         CALL QueueEmpty             ; check if the queue is empty or not 
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

003E 74FB                  332         JZ IfQueueIsEmpty          ; if it's empty, keep checking
                           333         ;JNZ QueueNotEmpty           ; if it's not empty, exit loop 
                           334         
0040                       335     QueueNotEmpty:
0040 83BC040102            336         CMP [SI].elsize, WORDSIZE   ; compare the size to the size of a word 
0045 7416                  337         JZ ReturnWord               ; if size is 2, then we return a word 
                           338         ; JNZ ReturnByte 
                           339     
0047                       340     ReturnByte: 
0047 8B9C0201              341         MOV BX, [SI].head          ; load head address into BX 
004B 8A00                  342         MOV AL, BYTE PTR[SI].array[BX]     ; get element from array at pos BX
004D 8384020101            343         ADD [SI].head, BYTESIZE    ; increment the head by 1 byte 
0052 B90001                344         MOV CX, ARRAY_SIZE        ; we will get (head + 1) mod length 
0055 49                    345         DEC CX                      ; by performing (head + 1) AND (size - 1) 
0056 218C0201              346         AND [SI].head, CX          ; mod value will be stored in CX 
005A EB1890                347         JMP EndDequeue 
                           348         
005D                       349     ReturnWord:
005D 8B9C0201              350         MOV BX, [SI].head          ; load head address into BX 
0061 8B00                  351         MOV AX, WORD PTR[SI].array[BX]     ; get element from array at pos BX
0063 8384020102            352         ADD [SI].head, WORDSIZE    ; increment the head by 2 bytes 
0068 B90001                353         MOV CX, ARRAY_SIZE        ; we will get (head + 2) mod length 
006B 49                    354         DEC CX                      ; by performing (head + 2) AND (size - 1) 
006C 238C0201              355         AND CX, [SI].head          ; mod value will be stored in CX 
0070 898C0201              356         MOV [SI].head, CX          ; move the mod length value into queue.head 
                           357         ;JMP EndDequeue 
                           358         
0074                       359     EndDequeue:
0074 C3                    360         RET
                           361     Dequeue     ENDP 
                           362     
                           363     
                           364     
                           365     ;
                           366     ;
                           367     ; Enqueue
                           368     ;
                           369     ; Description:          This function adds the passed 8-bit or 16-bit(depending 
                           370     ;                                       on the element size) value (v) to the tail of
                                    the queue 
                           371     ;                                       at the passed address (a). If the queue is fu
                                   ll it waits 
                           372     ;                                       until the queue has an open space in which to
                                    add the 
                           373     ;                                       value. It does not return until the value is 
                                   added to the 
                           374     ;                                       queue. (This is called a "blocking function".
                                   ) The address 
                           375     ;                                       (a) is passed in SI by value (thus the queue 
                                   starts at 
                           376     ;                                       DS:SI) and the value to enqueue (v) is passed
                                    by value 
                           377     ;                                       in AL if the element size for the queue is by
                                   tes and in 
                           378     ;                                       AX if it is words.
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           379     ;
                           380     ; Operation:            Move new element to the spot pointed to by the tail pointer
                           381     ;                                       and then increment the tail pointer by the ap
                                   propriate 
                           382     ;                   amount (by 2 if elements are word sized, 1 if elements are 
                           383     ;                   byte sized). 
                           384     ;
                           385     ; Arguments:            AL or AX - value to be added
                           386     ;                                       SI - address of queue   
                           387     ; Return Value:         None. 
                           388     ;
                           389     ; Local Variables:      AL - if queue holds byte-sized elements, this is value to 
                           390     ;                        add to the queue
                           391     ;                   AX - if queue holds word-sized elements, this is value to 
                           392     ;                        add to the queue
                           393     ;
                           394     ; Shared Variables: The STRUC is called qStruc, and the queue is called queue. 
                           395     ;                                       elsize (DB) - the size of elements it holds (
                                   in bytes)
                           396     ;                                       head (DW) - holds the address of the first el
                                   ement 
                           397     ;                                       tail (DW) - holds the address of spot after l
                                   ast element
                           398     ;
                           399     ; Global Variables: None. 
                           400     ;
                           401     ; Input:                        None. 
                           402     ; Output:                       None. 
                           403     ;
                           404     ; Error Handling:       None. 
                           405     ;       
                           406     ; Algorithms:           If the queue is full, we will loop forever until the queue 
                           407     ;                                       is not full. Otherwise, we will add the value
                                    to the tail
                           408     ;                                       of the queue and increment the tail pointer. 
                           409     ;
                           410     ; Data Structures:      STRUC: has properties length, size, address, head pointer,
                           411     ;                                       and tail pointer
                           412     ;                   alength  - the maximum number of elements that can be stored
                           413     ;                                       elsize  - the size of elements to be put in (
                                   words or bytes)
                           414     ;                                       head    - address of the first element 
                           415     ;                                       tail    - address of the spot after the last 
                                   element
                           416     ;
                           417     ;
                           418     
                           419     
0075                       420     Enqueue     PROC    NEAR
                           421                 PUBLIC  Enqueue
                           422         
0075                       423     EnqueueInit:
0075 8BC8                  424             MOV CX,AX                               ; store value to enqueue in CX before
                                    QueueFull 
                           425                                                             ;changes AX
8086/87/88/186 MACRO ASSEMBLER    QUEUE                                                    18:37:51  10/22/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

0077                       426     IfQueueIsFull:
0077 E8B1FF                427         CALL QueueFull              ; check if the queue is full or not 
007A 74FB                  428         JZ IfQueueIsFull           ; if it's full, keep checking
                           429         ;JNZ QueueNotFull            ; if it's not full, exit loop and enqueue value
                           430         
007C                       431     QueueNotFull:
007C 83BC040102            432         CMP [SI].elsize, WORDSIZE    ; compare the size to the size of a word 
0081 7416                  433         JE EnqueueWord               ; if size is 2, then we return a word 
                           434         ; JNE EnqueueByte 
                           435             
0083                       436     EnqueueByte: 
0083 8BC1                  437             MOV AX, CX
0085 8B9C0001              438         MOV BX, [SI].tail          ; load tail address into BX 
0089 8800                  439         MOV [SI].array[BX], AL     ; move AL value into the array at queue.tail
                           440         ;ADD [SI].tail, BYTESIZE    ; increment the tail by 1 byte 
                           441         ;MOV CX, [SI].alength       ; we will get (tail + 1) mod length 
                           442         ;DEC CX                     ; by performing (tail + 1) AND (size - 1) 
                           443         ;AND CX, [SI].tail          ; mod value will be stored in CX 
                           444         ;MOV [SI].tail, CX          ; move the mod length value into queue.tail  
008B 83C301                445         ADD BX,BYTESIZE             ; tail + 1
008E 81E3FF00              446             AND BX, ARRAY_SIZE-1    ; and it to get mod
0092 899C0001              447             MOV [SI].tail, BX
                           448             
0096 EB1A90                449             JMP EndEnqueue 
                           450         
0099                       451     EnqueueWord:
0099 8BC1                  452             MOV AX, CX
009B 8B9C0001              453         MOV BX, [SI].tail          ; load tail address into BX 
009F 8900                  454         MOV WORD PTR[SI].array[BX], AX     ; move AX value into the array at queue.tail
00A1 8384000102            455         ADD [SI].tail, WORDSIZE    ; increment the tail by 2 bytes
00A6 B90001                456         MOV CX, ARRAY_SIZE        ; we will get (tail + 2) mod length 
00A9 49                    457         DEC CX                      ; by performing (tail + 2) AND (size - 1) 
00AA 238C0001              458         AND CX, [SI].tail          ; mod value will be stored in CX 
00AE 898C0001              459         MOV [SI].tail, CX          ; move the mod length value into queue.tail
                           460         ;JMP EndEnqueue 
                           461         
00B2                       462     EndEnqueue:
00B2 C3                    463         RET
                           464     Enqueue     ENDP 
                           465                             
                           466     
----                       467     CODE    ENDS
                           468     
                           469         END

ASSEMBLY COMPLETE, NO ERRORS FOUND
