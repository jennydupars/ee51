8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE EVTHNDLR
OBJECT MODULE PLACED IN EVTHNDLR.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE EVTHNDLR.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1             NAME            EVTHNDLR
                             2             
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                                                EVENT HANDLERS      
                                                           ;
                             6     ;                                  Homework 4                                    ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This program is an event handler that manages interrupt service routines for 
                            12     ; the procedures for displaying strings on the LED display. The included 
                            13     ; functions are general enough to be used by functions other than the display 
                            14     ; functions. The included functions are: 
                            15     ;   InitTimer - initializes timer 
                            16     ;   InitCS  - initializes chip select
                            17     ;   ClrIRQVectors  - installs IllegalEventHandler for all invalid interrupts 
                            18     ;   IllegalEventHandler - sends EOI to interrupt handler to exit interrupt
                            19     
                            20     
                            21     ;
                            22     ; external function declarations
                            23     
                            24         EXTRN   TimerEventHandler:NEAR      ; located in tmrhndlr.asm, this function call
                                   s DisplayMux
                            25     
                            26     ;
                            27     ; Include files
                            28 +1  $INCLUDE(handlers.inc)
                      =1    29     
                      =1    30     
                      =1    31     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    32     ;                                                                            ;
                      =1    33     ;                                  EHDEMO.INC                                ;
                      =1    34     ;                              Event Handler Demo                            ;
                      =1    35     ;                                 Include File                               ;
                      =1    36     ;                                                                            ;
                      =1    37     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    38     
                      =1    39     ; This file contains the definitions for the Event Handler Demonstration
                      =1    40     ; program (EHDEMO.ASM).
                      =1    41     ;
                      =1    42     
                      =1    43     
                      =1    44     ; Timer Definitions
                      =1    45     
                      =1    46     ; Addresses
  FF56                =1    47     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1    48     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  FF50                =1    49     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
  FF66                =1    50     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1    51     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1    52     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1    53     
                      =1    54     ; Control Register Values
  E001                =1    55     Tmr0CtrlVal     EQU     0E001H
                      =1    56                             ;0E009H          ;value to write to Timer 0 Control Register
                      =1    57                                             ;1---------------  enable timer
                      =1    58                                             ;-1--------------  write to control
                      =1    59                                             ;--1-------------  enable interrupts
                      =1    60                                             ;----000000------  reserved
                      =1    61                                             ;---0------0-----  read only
                      =1    62                                             ;-----------0----  TMRIN0 is an enable
                      =1    63                                             ;------------10--  count timer 2 outs
                      =1    64                                             ;--------------0-  single counter mode
                      =1    65                                             ;---------------1  continuous mode
  C001                =1    66     Tmr2CtrlVal     EQU     0C001H          ;value to write to Timer 2 Control Register
                      =1    67                                             ;1---------------  enable timer
                      =1    68                                             ;-1--------------  write to control
                      =1    69                                             ;--0-------------  no interrupts
                      =1    70                                             ;----000000-0000-  reserved
                      =1    71                                             ;---0------0-----  read only
                      =1    72                                             ;---------------1  continuous mode
                      =1    73     
                      =1    74     ; Interrupt Vectors
  0008                =1    75     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
                      =1    76     
                      =1    77     
                      =1    78     ; Interrupt Controller Definitions
                      =1    79     
                      =1    80     ; Addresses
  FF32                =1    81     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    82     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    83     
                      =1    84     ; Register Values
  0001                =1    85     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    86                                             ;000000000000----  reserved
                      =1    87                                             ;------------0---  enable timer interrupt
                      =1    88                                             ;-------------001  timer priority
  0008                =1    89     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1    90     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1    91     
                      =1    92     
                      =1    93     ; Chip Select Unit Definitions
                      =1    94     
                      =1    95     ; Addresses
  FFA4                =1    96     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1    97     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                      =1    98     
                      =1    99     ; Control Register Values
  0003                =1   100     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   101                                             ;0000000000------  starts at address 0
                      =1   102                                             ;----------000---  reserved
                      =1   103                                             ;-------------0--  wait for RDY inputs
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   104                                             ;--------------11  3 wait states
  0183                =1   105     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   106                                             ;0---------000---  reserved
                      =1   107                                             ;-0000001--------  MCS is 8KB
                      =1   108                                             ;--------1-------  output PCS5/PCS6
                      =1   109                                             ;---------0------  PCS in I/O space
                      =1   110                                             ;-------------0--  wait for RDY inputs
                      =1   111                                             ;--------------11  3 wait states
                      =1   112     
                      =1   113     
                      =1   114     
                      =1   115     ; Timing Definitions
                      =1   116     
  0900                =1   117     COUNTS_PER_MS   EQU     2304            ;number of timer counts per 1 ms (assumes 18.
                                   432 MHz clock)
  00C8                =1   118     MS_PER_SEG      EQU     200             ;number of ms for each segment
                      =1   119     
                      =1   120     
                      =1   121     
                      =1   122     ; General Definitions
                      =1   123     
  0001                =1   124     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   125     LAST_RESERVED_VEC       EQU     3
  0100                =1   126     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   127     
  0080                =1   128     LEDDisplay      EQU     0080H           ;display address
                      =1   129     
  0008                =1   130     NUM_DIGITS      EQU     8               ;number of digits in the display
                           131     
                           132     CGROUP  GROUP   CODE
                           133     
----                       134     CODE    SEGMENT PUBLIC 'CODE'
                           135     
                           136             ASSUME  CS:CGROUP
                           137     
                           138                                                                                     
                                              
                           139     ;       
                           140     ;       
                           141     ;
                           142     ; InitTimer  
                           143     ;
                           144     ; Description:          This function will initialize the timer. The 
                           145     ;                                       timer will be initialized to generate interru
                                   pts every
                           146     ;                                       MS_PER_SEG milliseconds. The interrupt contro
                                   ller is 
                           147     ;                                       also initialized here to allow the timer inte
                                   rrupts. 
                           148     ;                                       The timer counts MS_PER_SEG long intervals to
                                    generate 
                           149     ;                                       the interrupts. This function is based on Gle
                                   n's code. 
                           150     ;
                           151     ; Operation:            The appropriate values are written to the timer control 
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           152     ;                                       registers in the PCB. The timer count registe
                                   rs are set 
                           153     ;                                       to zero. The interrupt controller is set up t
                                   o accept 
                           154     ;                                       timer interrupts and any pending interrupts a
                                   re cleared
                           155     ;                                       by sending a TimerEOI to the interrupt contro
                                   ller. 
                           156     ;       
                           157     ; Arguments:            None.
                           158     ; Return Value:         None.
                           159     ; Local Variables:      None.
                           160     ; Shared Variables: None. 
                           161     ; Global Variables: None.
                           162     ; Input:                        None. 
                           163     ; Output:                       None.
                           164     ; Error Handling:       None.
                           165     ; Algorithms:           None.
                           166     ; Data Structures:      None.
                           167     ;
0000                       168     InitTimer       PROC    NEAR
                           169                     PUBLIC  InitTimer
                           170            
                           171     
                           172                                     ;initialize Timer #0 for MS_PER_SEG ms interrupts
0000 BA50FF                173             MOV     DX, Tmr0Count   ;initialize the count register to 0
0003 33C0                  174             XOR     AX, AX
0005 EE                    175             OUT     DX, AL
                           176     
0006 BA52FF                177             MOV     DX, Tmr0MaxCntA ;setup max count for milliseconds per segment
0009 B8C800                178             MOV     AX, MS_PER_SEG  ;   count so can time the segments
000C EE                    179             OUT     DX, AL
                           180     
000D BA56FF                181             MOV     DX, Tmr0Ctrl    ;setup the control register, interrupts on
0010 B801E0                182             MOV     AX, Tmr0CtrlVal
0013 EE                    183             OUT     DX, AL
                           184     
                           185                                     ;initialize interrupt controller for timers
0014 BA32FF                186             MOV     DX, INTCtrlrCtrl;setup the interrupt control register
0017 B80100                187             MOV     AX, INTCtrlrCVal
001A EE                    188             OUT     DX, AL
                           189     
001B BA22FF                190             MOV     DX, INTCtrlrEOI ;send a timer EOI (to clear out controller)
001E B80800                191             MOV     AX, TimerEOI
0021 EE                    192             OUT     DX, AL
                           193     
                           194     
0022 C3                    195             RET                     ;done so return
                           196     
                           197     
                           198     InitTimer       ENDP
                           199     
                           200     
                           201     ;       
                           202     ;       
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           203     ;       
                           204     ; InitCS  
                           205     ;
                           206     ; Description:          This function will initialize the peripheral chip 
                           207     ;                                       selects on the 80188. Based on Glen's code. 
                           208     ;
                           209     ; Operation:            This writes the initial values to the PACS and 
                           210     ;                                       MPCS registers.
                           211     ;
                           212     ; Arguments:            None. 
                           213     ; Return Value:         None. 
                           214     ; Local Variables:      None. 
                           215     ; Shared Variables: None. 
                           216     ; Global Variables: None.
                           217     ; Input:                        None. 
                           218     ; Output:                       None. 
                           219     ; Error Handling:       None. 
                           220     ; Algorithms:           None. 
                           221     ; Data Structures:      None. 
                           222     ;
                           223     
                           224     
0023                       225     InitCS  PROC    NEAR
                           226             PUBLIC  InitCS
                           227     
0023 BAA4FF                228             MOV     DX, PACSreg     ;setup to write to PACS register
0026 B80300                229             MOV     AX, PACSval
0029 EE                    230             OUT     DX, AL          ;write PACSval to PACS (base at 0, 3 wait states)
                           231     
002A BAA8FF                232             MOV     DX, MPCSreg     ;setup to write to MPCS register
002D B88301                233             MOV     AX, MPCSval
0030 EE                    234             OUT     DX, AL          ;write MPCSval to MPCS (I/O space, 3 wait states)
                           235     
                           236     
0031 C3                    237             RET                     ;done so return
                           238     
                           239     InitCS  ENDP
                           240     
                           241     ;       
                           242     ; ClrIRQVectors  
                           243     ;
                           244     ; Description:          This functions installs the IllegalEventHandler for all
                           245     ;                       interrupt vectors in the interrupt vector table.  Note
                           246     ;                       that all 256 vectors are initialized so the code must be
                           247     ;                   located above 400H.  The initialization skips  (does not
                           248     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           249     ;                   LAST_RESERVED_VEC. This code is modelled after Glen's code.
                           250     ;
                           251     ; Arguments:            None.
                           252     ; Return Value:         None.
                           253     ;
                           254     ; Local Variables:      CX - vector counter 
                           255     ;                                       ES:SI - pointer to vector table 
                           256     ; Shared Variables: None.
                           257     ; Global Variables: None.
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           258     ; Input:                        None. 
                           259     ; Output:                       None. 
                           260     ; Error Handling:       None.
                           261     ; Algorithms:           None. 
                           262     ; Data Structures:      None. 
                           263     ;
0032                       264     ClrIRQVectors   PROC    NEAR
                           265                     PUBLIC  ClrIRQVectors
                           266     
0032                       267     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           268     
0032 33C0                  269             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0034 8EC0                  270             MOV     ES, AX
0036 BE0000                271             MOV     SI, 0           ;initialize SI to the first vector
                           272     
0039 B90001                273             MOV     CX, 256         ;up to 256 vectors to initialize
                           274     
                           275     
003C                       276     ClrVectorLoop:                  ;loop clearing each vector
                           277                                     ;check if should store the vector
003C 83FE04                278             CMP     SI, 4 * FIRST_RESERVED_VEC
003F 7205                  279             JB      DoStore         ;if before start of reserved field - store it
0041 83FE0C                280             CMP     SI, 4 * LAST_RESERVED_VEC
0044 760B                  281             JBE     DoneStore       ;if in the reserved vectors - don't store it
                           282             ;JA     DoStore         ;otherwise past them - so do the store
                           283     
0046                       284     DoStore:                        ;store the vector
0046 26C7045700     R      285             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
004B 26C74402----   R      286             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           287     
0051                       288     DoneStore:                      ;done storing the vector
0051 83C604                289             ADD     SI, 4           ;update pointer to next vector
                           290     
0054 E2E6                  291             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           292             ;JMP    EndClrIRQVectors;and all done
                           293     
                           294     
0056                       295     EndClrIRQVectors:               ;all done, return
0056 C3                    296             RET
                           297     
                           298     
                           299     ClrIRQVectors   ENDP
                           300                                                             
                           301                                                             
                           302                                                             
                           303     ;
                           304     ;                               
                           305     ;                               
                           306     ; IllegalEventHandler 
                           307     ;
                           308     ; Description:          This function will be modelled after Glen's code. This  
                           309     ;                                       function is the event handler for illegal (un
                                   initialized)
                           310     ;                                       interrupts. It is called when an illegal inte
                                   rrupt occurs.
8086/87/88/186 MACRO ASSEMBLER    EVTHNDLR                                                 19:20:20  10/29/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           311     ;
                           312     ; Operation:            When this function is called, nothing happens, except that
                           313     ;                                       it sends a non-specific EOI and returns. 
                           314     ;
                           315     ; Arguments:            None.
                           316     ; Return Value:         None. 
                           317     ; Local Variables:      None.
                           318     ; Shared Variables: None.
                           319     ; Global Variables: None.
                           320     ; Input:                        None. 
                           321     ; Output:                       None. 
                           322     ; Error Handling:       None.
                           323     ; Algorithms:           None.
                           324     ; Data Structures:      None.
                           325     
0057                       326     IllegalEventHandler     PROC    NEAR
                           327                             PUBLIC  IllegalEventHandler
                           328     
0057 90                    329             NOP                             ;do nothing (can set breakpoint here)
                           330     
0058 50                    331             PUSH    AX                      ;save the registers
0059 52                    332             PUSH    DX
                           333     
005A BA22FF                334             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
005D B80080                335             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
0060 EE                    336             OUT     DX, AL                  ;   the interrupt that got us here
                           337     
0061                       338     EndIllegalEventHandler:
0061 5A                    339             POP     DX                      ;restore the registers
0062 58                    340             POP     AX
                           341     
0063 CF                    342             IRET                            ;and return
                           343     
                           344     
                           345     IllegalEventHandler     ENDP
                           346     
----                       347     CODE        ENDS
                           348     
                           349         END

ASSEMBLY COMPLETE, NO ERRORS FOUND
