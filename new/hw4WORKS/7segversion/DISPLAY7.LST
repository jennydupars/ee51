8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLAY
OBJECT MODULE PLACED IN DISPLAY7.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE DISPLAY7.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1             NAME            DISPLAY
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                                                   DISPLAY          
                                                           ;
                             6     ;                                  Homework 4                                    ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ;
                            12     ; This file contains the functions for displaying strings on the 14-segment
                            13     ; displays.  The functions included are:
                            14     ;   Display        - displays a string to the LED display 
                            15     ;   DisplayNum     - displays a number as a decimal to the LED display
                            16     ;   DisplayHex     - displays a number in hexadecimal to the LED display
                            17     ;   InitDisplay    - initialize the display and its variables
                            18     ;   DisplayMux     - multiplex the LED display
                            19     
                            20     
                            21     ; Revision History:
                            22     ;     10/24/16          Jennifer Du      initial revision
                            23     ;         10/26/16              Jennifer Du              writing assembly code
                            24     ;
                            25     
                            26     
                            27     
                            28     ;external function declarations
                            29         
                            30             EXTRN   Hex2String:NEAR         ; converts number to hexstring
                            31                     EXTRN   Dec2String:NEAR         ; converts number to decstring
                            32             
                            33             EXTRN   ASCIISegTable:BYTE  ; 7-segment codes for segment buffer 
                            34                     
                            35                     
                            36     
                            37     ; include files
                            38 +1  $INCLUDE(display.inc)
                      =1    39     
                      =1    40     
                      =1    41     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    42     ;                                                                            ;
                      =1    43     ;                                  Display                                   ;
                      =1    44     ;                                Inlude File                                 ;
                      =1    45     ;                                  EE/CS 51                                  ;
                      =1    46     ;                                                                            ;
                      =1    47     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    48     
                      =1    49     ; This file contains the assembly language definitions for the display
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    50     ; functions for homework 4.
                      =1    51     
  0008                =1    52     numDigits       EQU     8d                   ; number of LED digits
  0008                =1    53     numSegs         EQU     8d                 ; length of segment buffer
  0010                =1    54     numSegsBytes    EQU     16d                 ; length of segment buffer
                      =1    55     
  0008                =1    56     maxDispLength   EQU     8                   ; max ///////////////////////////////////
                                   /
                      =1    57     
  0001                =1    58     ODD_OR_EVEN_BIT_MASK    EQU  0001H          ; compare this to numbers to test if odd 
                                   or even
                      =1    59     
                      =1    60     ; Specific Digit/LED Definitions
                      =1    61     
  0000                =1    62     LED_BLANK       EQU     00000000B       ;a blank LED            
  FFA4                =1    63     IO_LED_LOC      EQU     0FFA4H          ; I/O location of the LED display
  0000                =1    64     IO_LED_VAL      EQU     0               ; value to write to LED display for correct C
                                   S
                      =1    65     
                      =1    66     ; ASCII constants
                      =1    67     
  0000                =1    68     ASCII_NULL      EQU     0000H           ; value of null character 
  0020                =1    69     ASCII_BLANK     EQU     ' '
                            70 +1  $INCLUDE(common.inc)
                      =1    71     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    72     ;                                                                            ;
                      =1    73     ;                                  COMMON.INC                                ;
                      =1    74     ;                                   EE/CS 51                                 ;
                      =1    75     ;                    Include file for commonly used constants                ;
                      =1    76     ;                                                                            ;
                      =1    77     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    78     
                      =1    79     ; This file contains commonly used constants. 
                      =1    80     
                      =1    81     ; Word and byte size:
                      =1    82     
  0002                =1    83     WORDSIZE        EQU         0002H       ; 1 word is 2 bytes
  0001                =1    84     BYTESIZE        EQU         0001H       ; 1 byte is 1 byte 
                            85 +1  $INCLUDE(converts.inc)
                      =1    86     
                      =1    87     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    88     ;                                                                            ;
                      =1    89     ;                                  CONVERTS.INC                              ;
                      =1    90     ;                               Conversion Functions                         ;
                      =1    91     ;                                  Include File                              ;
                      =1    92     ;                                                                            ;
                      =1    93     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    94     
                      =1    95     ;This file contains the non-magic numbers for convert.
                      =1    96     
                      =1    97     ; constants used in both:
                      =1    98     
  0041                =1    99     ASCIIa          EQU             65          ; ascii value for 'A' 
  0030                =1   100     ASCII0          EQU             48          ; ascii value for '0' 
  002D                =1   101     ASCIIdash       EQU     45          ; ascii value for '-'
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0000                =1   102     NULL        EQU     0                   ; ascii value for null character
                      =1   103     
                      =1   104     ; no magic numbers for BX counter
  0005                =1   105     bFIVE       EQU     0005H
  0004                =1   106     bFOUR       EQU     0004H
  0003                =1   107     bTHREE      EQU     0003H
  0002                =1   108     bTWO        EQU     0002H
  0001                =1   109     bONE        EQU     0001H
  0000                =1   110     ZERO        EQU     0000H
                      =1   111     
                      =1   112     
                      =1   113     
                      =1   114     ; constants used in Dec2String:
                      =1   115     
  2710                =1   116     TENto4      EQU     2710H               ; powers of 10: 10000
  03E8                =1   117     TENto3      EQU     03E8H               ; powers of 10: 1000
  0064                =1   118     TENto2      EQU     0064H               ; powers of 10: 100
  000A                =1   119     TENto1      EQU     000AH               ; powers of 10: 10
                      =1   120     
  8000                =1   121     TEST1STBIT    EQU     8000H     ; test first bit for 1 or 0
                      =1   122     
                      =1   123     
                      =1   124     
                      =1   125     ; constants used in Hex2String:
                      =1   126     
  0004                =1   127     FOURBITS        EQU             4                       ; used for shifting 4 bits le
                                   ft or right
                      =1   128     
  F000                =1   129     FIRST4BITS  EQU     0F000H      ; gets first 4 digits of numbers compared to it
  000A                =1   130     TEN         EQU     000AH       ; for use when comparing numbers to 10
                           131     
                           132     
                           133     
                           134     CGROUP  GROUP   CODE
                           135     DGROUP  GROUP   DATA, STACK
                           136     
----                       137     CODE    SEGMENT PUBLIC 'CODE'
                           138     
                           139             ASSUME  CS:CGROUP, DS:DGROUP, SS:STACK
                           140     
                           141                     
                           142     ; Display 
                           143     ;
                           144     ; Description:          This function converts an ASCII string into the 
                           145     ;                                       series of 14-segment codes that, when ported 
                                   to the LED 
                           146     ;                                       display, forms a visual representation of tha
                                   t string. 
                           147     ;                                       The function is passed a <null> terminated st
                                   ring (str) to
                           148     ;                                       output to the LED display. The string is pass
                                   ed by 
                           149     ;                                       reference in ES:SI (i.e. the address of the s
                                   tring is 
                           150     ;                                       ES:SI). The maximum length of the string that
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                                    can be 
                           151     ;                                       displayed at any given moment is 8 characters
                                    long. The 
                           152     ;                   maximum length of a string that can be displayed is 64 
                           153     ;                   characters. The 8-character display will be able to scroll
                           154     ;                   through the string, 8 characters at a time.
                           155     ;
                           156     ; Operation:            This function will loop through the given string, and look 
                           157     ;                                       up the 14 segment code for each character in 
                                   the 14-segment 
                           158     ;                                       code table. Then it will write the value of t
                                   he 14 segment 
                           159     ;                                       code to the buffer in the order that the char
                                   acters appear. 
                           160     ;                   If the string is shorter than the length of the segment 
                           161     ;                   buffer, the buffer will be padded with blank spaces. If the 
                           162     ;                   string is longer than the length of the segment buffer, it 
                           163     ;                   will be cut off at the maximum length, 64 characters.  
                           164     ;
                           165     ; Arguments:            SI - address of string to be displayed
                           166     ; Return Value:         None. 
                           167     ;
                           168     ; Local Variables:      SI - address of string to be displayed
                           169     ; Shared Variables: segBuffer - place to store the segment code values  
                           170     ; Global Variables: None. 
                           171     ;
                           172     ; Input:                        None. 
                           173     ; Output:                       None.
                           174     ; Error Handling:       None. 
                           175     ; Algorithms:           None. 
                           176     ; Data Structures:      The segment buffer is an array of words which holds the 
                           177     ;                                       14-segment code values for each character in 
                                   the string 
                           178     ;                                       
                           179                                             
                           180                                             
0000                       181     Display         PROC    NEAR
                           182                     PUBLIC  Display
                           183                     
0000                       184     StartDisplay:
0000 60                    185         PUSHA                       
                           186         
0001 B90000                187         MOV     CX, 0           ; initialize counter for the segbuffer
                           188         
0004                       189     CheckEndOfString:
0004 33C0                  190         XOR     AX,AX                                       ; clear AX
0006 268A04                191         MOV     AL, ES:[SI]            ; get value of the first character in the string 
0009 46                    192             INC     SI                          ; move to next character in string
000A 3C00                  193         CMP     AL, ASCII_NULL            ; see if the string has ended (see if the curre
                                   nt character is euqal to ASCII_NULL)                        
000C 7415                  194         JE      EndOfString                                 ; if =, jump to end of the st
                                   ring 
                           195         ;JMP    StoreSegTableValue
                           196         
000E                       197     StoreSegTableValue:
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           198     
000E BB0000         E      199         MOV     BX, OFFSET(ASCIISegTable)
0011 2ED7                  200             XLAT    CS:ASCIISegTable        ; value is stored in AL
                           201         
0013 8BD9                  202         MOV     BX, CX              ; move index of segbuffer into BX
0015 88870000       R      203         MOV     BYTE PTR segBuffer[BX], AL          ; move value into segbuffer 
                           204         
0019 83C101                205         ADD     CX,BYTESIZE
001C 83F908                206         CMP     CX, numSegs                 ; if we have reached capacity of the segment 
                                   buffer, they'd be equal
001F 7CE3                  207         JL      CheckEndOfString          ; not equal! -> store more segment table values
0021 7D10                  208         JGE     EndDisplay                  ; >= means we end this function, buffer can't
                                    fit more
                           209         
                           210         ;JMP     CheckEndOfString           ; after every increment in the string pointer
                                   , see
                           211                                             ; if we have reached the end of the string
0023                       212     EndOfString:
                           213         
0023 8BD9                  214         MOV     BX, CX      
                           215         
0025 C68700000090   R      216         MOV     segBuffer[BX], ASCII_NULL   ; store null string in each entry in 
                           217                                             ; segment buffer
002B 83C101                218         ADD     CX, BYTESIZE
                           219         ;JMP     CheckEndOfBufferAfterString
                           220         
002E                       221     CheckEndOfBufferAfterString:            ; string is done and we are checking if buffe
                                   r
                           222                                             ; capacity has been reached
002E 83F908                223         CMP     CX, numSegs
0031 7CF0                  224         JL      EndOfString                 ; buffer capacity not reached: add more space
                                   s
                           225         ;JGE     EndDisplay
                           226         
0033                       227     EndDisplay:
0033 61                    228         POPA
0034 C3                    229         RET                     ; we are done, return
                           230         
                           231         
                           232     Display ENDP
                           233     
                           234     
                           235     
                           236         
                           237     ;               
                           238     ;
                           239     ; DisplayNum 
                           240     ;
                           241     ; Description:          This function turns a given number into its decimal 
                           242     ;                                       representation and gets it ready to be displa
                                   yed on the 
                           243     ;                                       LED display. The function is passed a 16-bit 
                                   signed value 
                           244     ;                                       (n) to output in decimal (at most 5 digits pl
                                   us sign) to 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           245     ;                                       the LED display. The number (n) is passed in 
                                   AX by value. 
                           246     ;                   The resulting string is written to DS:SI.
                           247     ;
                           248     ; Operation:            We will use two previously written functions to 
                           249     ;                                       display a number in decimal. First, we will t
                                   urn the given
                           250     ;                                       number into a string in decimal form using De
                                   c2String, and
                           251     ;                                       then we will call Display on this string to s
                                   how it 
                           252     ;                                       on the LED display.
                           253     ;
                           254     ; Arguments:            AX - 16-bit signed value to be turned into a decimal string
                           255     ; Return Value:         None.
                           256     ; Local Variables:      AX - number to be displayed
                           257     ;                                       SI - address of string to be displayed 
                           258     ; Shared Variables: segBuffer - place to store the segment code values  
                           259     ; Global Variables:     None. 
                           260     ; Input:                        None. 
                           261     ; Output:                       None.
                           262     ; Error Handling:       None.
                           263     ; Algorithms:           None.
                           264     ; Data Structures:      None.
                           265     ;
                           266     
0035                       267     DisplayNum      PROC    NEAR
                           268                     PUBLIC  DisplayNum
0035 60                    269         PUSHA
0036 BE0A0090       R      270         MOV     SI, OFFSET(stringBuffer) ; DS:SI should point to stringBuffer, set this 
                           271                                             ; up so Dec2String can write string there.
                           272     
                           273         ; get ES to equal DS
003A 8CDB                  274         MOV     BX, DS
003C 8EC3                  275         MOV     ES, BX
                           276             
003E 56                    277         PUSH SI
003F E80000         E      278         CALL    Dec2String                          ; turns number to decimal string 
0042 5E                    279         POP SI
                           280         
0043 E8BAFF                281             CALL    Display                                 ; calls display on the string
                                     
0046 61                    282         POPA
0047 C3                    283         RET
                           284     DisplayNum      ENDP          
                           285     
                           286     ;
                           287     ;
                           288     ; DisplayHex 
                           289     ;
                           290     ; Description:          This function turns a given number into its hex 
                           291     ;                                       representation and gets it ready to be displa
                                   yed. 
                           292     ;                                       The function is passed a 16-bit unsigned valu
                                   e (n) to 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           293     ;                                       output in hexadecimal (at most 4 digits) to t
                                   he LED 
                           294     ;                                       display. The number (n) is passed in AX by va
                                   lue. 
                           295     ;                   The resulting string is written to DS:SI.
                           296     ;
                           297     ; Operation:            We will use two previously written functions to 
                           298     ;                                       display a number in hex. First, we will turn 
                                   the given
                           299     ;                                       number into a string in hex form using Hex2St
                                   ring, and
                           300     ;                                       then we will call Display on this string to s
                                   how it 
                           301     ;                                       on the LED display.
                           302     ;
                           303     ; Arguments:            AX - 16-bit unsigned value to be turned into a hex string
                           304     ;
                           305     ; Return Value:         None.
                           306     ;
                           307     ; Local Variables:      AX - 16-bit unsigned value to be turned into a hex string
                           308     ;                   SI - address of string to be displayed  
                           309     ; Shared Variables: segBuffer - place to store the segment code values  
                           310     ; Global Variables: None. 
                           311     ; Input:                        None. 
                           312     ; Output:                       None. 
                           313     ; Error Handling:       None. 
                           314     ; Algorithms:           None. 
                           315     ; Data Structures:      None. 
                           316     ;
0048                       317     DisplayHex      PROC    NEAR
                           318                     PUBLIC  DisplayHex
                           319     
0048 BE0A0090       R      320         MOV     SI, OFFSET(stringBuffer)    ; set address of SI up so that Hex2String
                           321                                                 ; can write the string here
                           322     
                           323         ; get ES to equal DS
004C 8CDB                  324         MOV     BX, DS
004E 8EC3                  325         MOV     ES, BX
0050 56                    326         PUSH    SI
                           327         
0051 E80000         E      328         CALL    Hex2String          ; converts number to hex string 
0054 5E                    329         POP SI
                           330         
0055 E8A8FF                331         CALL    Display             ; displays string on LED display 
0058 C3                    332             RET
                           333     DisplayHex      ENDP
                           334     
                           335     
                           336             
                           337     ; InitDisplay 
                           338     ;
                           339     ; Description:          This function initializes the segment buffer, clears 
                           340     ;                                       the display (by clearing the seg buffer), and
                                    
                           341     ;                                       initializes display multiplexing variables. 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           342     ;
                           343     ; Operation:            This function blanks the digits and initializes the 
                           344     ;                                       display muxing variables. 
                           345     ;
                           346     ; Arguments:            None. 
                           347     ; Return Value:         None.           
                           348     ; Local Variables:      BX - counter for looping through segment buffer
                           349     ; Shared Variables: currentSeg - keeps track of next digit for mux 
                           350     ;                                       segBuffer  - buffer is filled with DISPLAY_BL
                                   ANK
                           351     ; Global Variables: None. 
                           352     ; Input:                        None. 
                           353     ; Output:                       The LED display is blanked.
                           354     ; Error Handling:       None.
                           355     ; Algorithms:           None.
                           356     ; Data Structures:      None.
                           357     ;
                           358     
                           359     
0059                       360     InitMDisplay     PROC    NEAR
                           361                     PUBLIC  InitMDisplay
                           362     
                           363     
0059                       364     StartInitDisplay:                   
0059 60                    365         PUSHA                           ; save registers
                           366         
005A BB0000                367         MOV     BX, 0                   ; start counter at 0 (this counter loops 
                           368                                         ; segment buffer and clears each entry)
                           369                                         
005D BAA4FF                370         MOV     DX, IO_LED_LOC          ; get I/O location of LED display 
0060 B000                  371         MOV     AL, IO_LED_VAL          ; get I/O value to write to IO_LED_LOC 
0062 EE                    372         OUT     DX, AL                  ; write 0 to I/O location 0FFA4H for display chip
                                    select logic
                           373     
0063                       374     ClearDisplay:                       ;start clearing the display
0063 B90800                375         MOV     CX, numSegs             ;number of segments to clear
0066 C68700000090   R      376         MOV     segBuffer[BX], LED_BLANK   ; move blank character into each 
                           377                                                 ; segBuffer entry
006C 43                    378         INC     BX                      ; increment counter
006D 83FB08                379         CMP     BX,numSegs              ; compare counter to 8 (number of segments)
0070 75F1                  380         JNE     ClearDisplay            ; if the counter hasn't reached 8, then 
                           381                                         ; clear next entry in segment buffer
                           382         ;JE      InitMuxVariables
                           383         
0072                       384     InitMuxVariables:
0072 C70608000000   R      385         MOV     currentSeg, 0                       ; Initialize current mux segment 
                           386        ;JMP    EndInitDisplay          ;all done now
                           387         
0078                       388     EndInitDisplay:                         ;done initializing the display 
0078 61                    389         POPA                            ; restore registers and
0079 C3                    390         RET                             ; return
                           391     
                           392     
                           393     InitMDisplay     ENDP
                           394     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           395     
                           396     ; DisplayMux 
                           397     ;
                           398     ; Description:          Multiplexer for the display. This procedure multiplexes
                           399     ;                                       the LED display under interrupt control. It i
                                   s meant to 
                           400     ;                                       be called at a regular interval of about 1 ms
                                   . This 
                           401     ;                                       function is going to display 1 digit for 1 in
                                   stance. 
                           402     ;       
                           403     ; Operation:            The multiplexer remembers which digit was called last,
                           404     ;                                       by storing and updating the muxCounter variab
                                   le. Then it 
                           405     ;                                       writes the 14-segment code of the next digit 
                                   to the
                           406     ;                                       display at the current digit. One digit is ou
                                   tput each time
                           407     ;                                       this function is called.
                           408     ;
                           409     ; Arguments:            None.
                           410     ; Return Value:         None.
                           411     ; Local Variables:      None.
                           412     ; Shared Variables: currentSeg - number that keeps track of which digit is
                           413     ;                                                                       being display
                                   ed
                           414     ;                                       buffer     - segment buffer holding segment c
                                   ode values 
                           415     ; Global Variables: None. 
                           416     ; Input:                        None. 
                           417     ; Output:                       The next digit is output to the display.  
                           418     ; Error Handling:       None. 
                           419     ; Algorithms:           None. 
                           420     ; Data Structures:      segment buffer - array of bytes holding segment code values 
                           421     ;
                           422     
                           423     
                           424     
007A                       425     DisplayMux                      PROC    NEAR            
                           426                                             PUBLIC  DisplayMux
                           427             
007A                       428     StartDisplayMux:                                         
007A 60                    429         PUSHA                       ; store registers   
                           430        
                           431         ; we want to see if currentSeg is even or odd
                           432         
007B 8B1E0800       R      433         MOV     BX, currentSeg
007F 8A870000       R      434         MOV     AL, BYTE PTR segBuffer[BX]
                           435         
0083 8B160800       R      436             MOV     DX, currentSeg  ; find address to port to 
0087 EE                    437             OUT     DX, AL 
                           438         
0088                       439     IncrementMuxCounter:                    ; set number to mux next time 
0088 43                    440         INC     BX
0089 8BC3                  441         MOV     AX, BX
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  19:20:20  10/29/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

008B B90800                442         MOV     CX, numSegs         ; get (currentSeg + 1) mod (number of segments)
008E F7F1                  443         DIV     CX                  ; to accoung for mux counter wraparound
0090 89160800       R      444         MOV     currentSeg, DX
                           445     
0094                       446     EndDisplayMux:
0094 61                    447         POPA                        ; restore registers
0095 C3                    448             RET                                                     ; done multiplexing L
                                   EDs - return
                           449             
                           450     
                           451     DisplayMux                      ENDP
                           452     
                           453     
                           454     
----                       455     CODE    ENDS                                                                   
                           456     
                           457     
                           458     
                           459     
                           460     
                           461     ; the data segment 
                           462     
----                       463     DATA    SEGMENT PUBLIC  'DATA'
                           464     
0000 (8                    465     segBuffer       DB       numSegs DUP (?)        ; buffer holding currently displayed 
                                   pattern
     ??
     )
                           466                                                                             ; holds words
                                    because 14-seg codes are words
0008 ????                  467     currentSeg      DW      ?                   ; current segment of digit to be muxed ne
                                   xt
                           468     
000A (16                   469     stringBuffer DB  numSegsBytes DUP (?)   ; character array 
     ??
     )
                           470                     
----                       471     DATA    ENDS
                           472     
                           473     
                           474     
                           475     ;the stack
                           476     
----                       477     STACK   SEGMENT STACK  'STACK'
                           478     
0000 (80                   479             DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                           480     
01E0                       481             TopOfStack      LABEL   WORD
                           482     
----                       483     STACK   ENDS
                           484     
                           485     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
