
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;								    DISPLAY                                  ;
;                           	   Homework 4        		                 ;
;                                   EE/CS 51                                 ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Contains 3 display routines: Display, DisplayNum, and DisplayHex, 
; and a bunch of auxiliary functions: 
;   Display   	   - displays a string to the LED display 
;   DisplayNum     - displays a number as a decimal to the LED display
;   DisplayHex     - displays a number in hexadecimal to the LED display
; 	DisplayMUX 	   - displays a character on the display for 1 instance 
;	DisplayTimerEventHandler - calls DisplayMUX repeatedly to sustain display 
;	InitDisplay    - initialize the segment buffer, clears display
;	InitDisplayTimer - initializes timer 
;	InitDisplayCS  - initialize chip select
;	ClrIRQVectors  - installs IllegalEventHandler for all invalid interrupts 
;	DisplayInstallTimer - installs timer event handler for the timer interrupt 
;	DisplayIllegalEventHandler - sends EOI to interrupt handler to exit interrupt


;
; Revision History:
;     10/24/16  	Jennifer Du      initial revision

        

; Display 
;
; Description: 		This function converts an ASCII string into the 
;					series of 14-segment codes that, when ported to the LED 
;					display, forms a visual representation of that string. 
;					The function is passed a <null> terminated string (str) to
;					output to the LED display. The string is passed by 
;					reference in ES:SI (i.e. the address of the string is 
;					ES:SI). 
;
; Operation: 		This function will loop through the given string, and look 
;					up the 14 segment code for each character. Then it will 
;					write the value of the 14 segment code to the buffer in 
;					the order that the characters appear. 
;
; Arguments: 		SI - address of string to be displayed
; Return Value:		None. 
;
; Local Variables:	SI - address of string to be displayed
; Shared Variables: buffer - place to store the segment code values 
;					numDigits - number of digits in display 
; Global Variables: None. 
;
; Input: 			None. 
; Output: 			None.
; Error Handling: 	None. 
; Algorithms: 		None. 
; Data Structures: 	The segment buffer is an array of words which holds the 
;					14-segment code values for each character in the string 
;					
; Pseudocode:


	save registers 
	
	for i in numDigits:						; for each digit in the buffer, 
		if (i <= string.length):  			; look up 14-seg code for the ith 
			buffer[i] = segTable(string[i]) ; character in the string and store
											; if we are not at end of string
		else: 								; if string length less than buffer 
			buffer[i] = ASCII_NULL			; pad with null characters 
		
	restore registers 
		
;		
;
; DisplayNum 
;
; Description: 		This function turns a given number into its decimal 
;					representation and gets it ready to be displayed on the 
;					LED display. The function is passed a 16-bit signed value 
;					(n) to output in decimal (at most 5 digits plus sign) to 
;					the LED display. The number (n) is passed in AX by value. 
;
; Operation: 		We will use two previously written functions to 
;					display a number in decimal. First, we will turn the given
;					number into a string in decimal form using Dec2String, and
;					then we will call Display on this string to show it 
;					on the LED display.
;
; Arguments: 		AX - 16-bit signed value to be turned into a decimal string
; Return Value: 	None.
;
; Local Variables: 	AX - number to be displayed
;					SI - address of string to be displayed 
; Shared Variables: None.
; Global Variables:	None. 
; Input: 			None. 
; Output: 			None.
; Error Handling: 	None.
; Algorithms: 		None.
; Data Structures: 	None.
;

Pseudocode:

	CALL Dec2String				; turns number to decimal string 
	CALL Display 				; calls display on the string 


;
;
; DisplayHex 
;
; Description: 		This function turns a given number into its hex 
;					representation and gets it ready to be displayed. 
;					The function is passed a 16-bit unsigned value (n) to 
;					output in hexadecimal (at most 4 digits) to the LED 
;					display. The number (n) is passed in AX by value. 
;
; Operation:		We will use two previously written functions to 
;					display a number in hex. First, we will turn the given
;					number into a string in hex form using Hex2String, and
;					then we will call Display on this string to show it 
;					on the LED display.
;
; Arguments:		AX - 16-bit unsigned value to be turned into a hex string
;
; Return Value:		None.
;
; Local Variables:	AX - 16-bit unsigned value to be turned into a hex string
;                   SI - address of string to be displayed  
; 
; Shared Variables: None.
; Global Variables: None. 
; Input:			None. 
; Output:			None. 
; Error Handling:	None. 
; Algorithms:		None. 
; Data Structures: 	None. 
;

Pseudocode:

	CALL Hex2String		; converts number to hex string 
	CALL Display 		; displays string on LED display 
	
	
	
; DisplayMUX 
;
; Description: 		Multiplexer for the display. This procedure multiplexes
;					the LED display under interrupt control. It is meant to 
;					be called at a regular interval of about 1 ms. This 
;					function is going to display 1 digit for 1 instance. 
;	
; Operation: 		The multiplexer remembers which digit was called last, 
;					and writes the 14-segment code of the next digit to the
;					display at the current digit.
;
; Arguments:		None.
; Return Value:		None.
; Local Variables:	None.
; Shared Variables: muxCounter - number that keeps track of which digit to
;									display to
;					buffer 	   - segment buffer holding segment code values 
; Global Variables: None. 
; Input:			None. 
; Output:			A segment to the display.  
; Error Handling:	None. 
; Algorithms:		None. 
; Data Structures: 	segment buffer - array of bytes holding segment code values 
;
; Pseudocode:

	save registers
	
	
	display[muxCounter] = buffer[muxCounter]	  ; write digit to display
	muxCounter = (muxCounter + 1) mod (numDigits) ; update muxCounter 
	
	send EOI
	restore registers
	
	


; DisplayTimerEventHandler 
;
; Description: 		This function is the event handler for the timer 
;					interrupts. It outputs the next pattern 
;					to the LED display. 
;
; Operation:		This function calls DisplayMUX, which displays the 
;					current digit to be displayed, as stored by the variable 
;					muxCounter (local to DisplayMUX). It calls DisplayMUX 
;					repeatedly.					
;
; Arguments:		None.
; Return Value:		None.
; Local Variables:	None. 
; Shared Variables: None. 
; Global Variables: None. 
; Input:			None. 
; Output:			A segment to the display.
; Error Handling:	None.
; Algorithms:		None.
; Data Structures: 	None.
;
; Pseudocode:
	
	save registers
	
	loop:
		CALL DisplayMux 
	
	send EOI to interrupt controller 
	restore registers 
	
	
	
	
; InitDisplay 
;
; Description: 		This function initializes the segment buffer, clears 
;					the display (digits blanked), and initializes display 
;	   			    multiplexing variables. 
;
; Operation:   		This function blanks the digits and initializes the 
;					display muxing variables. 
;
; Arguments:   		None. 
; Return Value:		None. 		
; Local Variables: 	i - counter for loop 
; Shared Variables: numDigits  - number of digits in the display 
;					muxCounter - keeps track of next digit for mux 
; Global Variables: None. 
; Input:			None. 
; Output:			None.
; Error Handling:	None.
; Algorithms:		None.
; Data Structures: 	None.
;
; Pseudocode:

	i = 0 					; counter for looping through display's digits
	while (i < numDigits)	
		display[i] = LED_BLANK_PATTERN ; clears display
		i += 1 					; move onto next digit 
	endwhile 
	
	muxCounter = 0 			; ready for muxing 



;
;
;
; DisplayInstallHandler 
;
; Description: 		This function installs the event handler for the timer 
;					interrupt. It is based on Glen's code. 
;			
; Operation:		The event handler address is written to the timer 
;					interrupt vector. 
;
; Arguments:		None. 
; Return Value:		None. 
; Local Variables:	None. 
; Shared Variables: None. 
; Global Variables: None. 
; Input:			None. 
; Output:			None. 
; Error Handling:	None.
; Algorithms:		None.
; Data Structures: 	None.
;
; Pseudocode:
	
	TimerVector = DisplayTimerEventHandler		; stores event handler at the 
												; the address of the timer 
												; interrupt vector


												
;	
;	
;
; InitDisplayTimer  
;
; Description: 		This function will initialize the timer. The 
;					timer will be initialized to generate interrupts every
;					MS_PER_SEG milliseconds. The interrupt controller is 
;					also initialized here to allow the timer interrupts. 
;					The timer counts MS_PER_SEG long intervals to generate 
;					the interrupts. This function is based on Glen's code. 
;
; Operation:		The appropriate values are written to the timer control 
;					registers in the PCB. The timer count registers are set 
;					to zero. The interrupt controller is set up to accept 
;					timer interrupts and any pending interrupts are cleared
;					by sending a TimerEOI to the interrupt controller. 
;	
; Arguments:		None.
; Return Value:		None.
; Local Variables:	None.
; Shared Variables: None. 
; Global Variables: None.
; Input:			None. 
; Output:			None.
; Error Handling:	None.
; Algorithms:		None.
; Data Structures: 	None.
;
; Pseudocode:
		
	timer.t0 = 0				; initial time is 0 
	timer.millisecondsPerSegment = MS_PER_SEG ; milliseconds between interrupts
	timer.control = 0 			; set up control register with interrupts on 
	
	intrptCntrler = intCtrlVal	; initialize interrupts controller for timers
	send TimerEOI 			    ; send timer EOI to clear controller 
	


;	
;	
;	
; InitDisplayCS  
;
; Description: 		This function will initialize the peripheral chip 
;					selects on the 80188. Based on Glen's code. 
;
; Operation:		This writes the initial values to the PACS and 
;					MPCS registers.
;
; Arguments:		None. 
; Return Value:		None. 
; Local Variables:	None. 
; Shared Variables: None. 
; Global Variables: None.
; Input:			None. 
; Output:			None. 
; Error Handling:	None. 
; Algorithms:		None. 
; Data Structures: 	None. 
;
; Pseudocode:	

	write PACSreg = PACSval 		; chip select logic 
	write MPCSreg = MPCSval 

	
	
;
;	
;	
; ClrIRQVectors  
;
; Description: 		This functions installs the IllegalEventHandler for all
;              		interrupt vectors in the interrupt vector table.  Note
;              		that all 256 vectors are initialized so the code must be
;                   located above 400H.  The initialization skips  (does not
;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
;                   LAST_RESERVED_VEC. This code is modelled after Glen's code.
;
; Arguments:		None.
; Return Value:		None.
;
; Local Variables:	CX - vector counter 
;					ES:SI - pointer to vector table 
; Shared Variables: None.
; Global Variables: None.
; Input:			None. 
; Output:			None. 
; Error Handling:	None.
; Algorithms:		None. 
; Data Structures: 	None. 
;
; Pseudocode: 		

		for (int i = 0; i < 256; i++):			; loop through all the vectors
			if (SI+4*i < FIRST_RESERVED_VEC or SI+4*i > LAST_RESERVED_VEC):	
			; if the vector's address is less than the first reserved vector 
			; or greater than the last reserved vector:
				ES:SI+4*i = address of IllegalEventHandler
							; so IllegalEventHandler will be called when the  
							;	interrupt at this address is triggered
							
							
							
							
;
;				
;				
; DisplayIllegalEventHandler 
;
; Description: 		This function will be modelled after Glen's code. This  
;					function is the event handler for illegal (uninitialized)
;					interrupts. It is called when an illegal interrupt occurs.
;
; Operation:		When this function is called, nothing happens, except that
;					it sends a non-specific EOI and returns. 
;
; Arguments:		None.
; Return Value:		None. 
; Local Variables:	None.
; Shared Variables: None.
; Global Variables: None.
; Input:			None. 
; Output:			None. 
; Error Handling:	None.
; Algorithms:		None.
; Data Structures: 	None.
;
; Pseudocode:		
	
	Send a non-specific EOI to the interrupt controller to end the illegal
	interrupt