        NAME    CONVERTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;                                   CONVERTS                                 ;
;                             Conversion Functions                           ;
;                                   EE/CS 51                                 ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This file contains two functions: Dec2String, and Hex2String. These functions 
; convert binary numbers into decimal and hexadecimal representations of numbers 
; into strings usable by the RoboTrike. 
;
; Revision History:
;       10/10/16     Jennifer Du     initial revision


; Dec2String
;
;
; Description:      This function converts the 16-bit number n to a string 
;                   containing its decimal representation stored at a. The 
;                   function is passed a 16-bit signed value (n) to convert to 
;                   decimal (at most 5 digits plus sign) and store as a string. 
;                   The string will contain the <null> terminated decimal 
;                   representation of the value in ASCII. The resulting string is 
;                   stored starting at the memory location indicated by the passed 
;                   address (a). The number (n) is passed in AX by value. The 
;                   address (a) is passed in SI by value. 
;
; Operation:        First, this function checks to see if the number is negative 
;                   or positive. If it's positive, then the digits are multiplied 
;                   by successively higher powers of two until all the digits have 
;                   have been evaluated as decimals. If it's negative, then the 
;                   digits are one-by-one converted from 0 to 1, or from 1 to 0. 
;                   Then, they are evaluated into decimal form. Finally, 1 is added
;                   to the result, and a negative sign is added. 
;
; Arguments:        AX - signed binary value to convert to string
;                   SI - address at which the resulting string will be stored
;
; Return Values:    SI - address with the resulting string
;
; Local Variables:  arg (AX)    - passed signed binary value to convert.
;                   digit (AX)  - computed digit.
;                   ERROR (CF)  - error flag.
;                   tens (CX)   - current power of 10 being computed.
;                   twos        - current power of 2 being computed.
;                   flipped     - flipped binary value.
;                   sign        - positive or negative.
;                   result (BX) - result from conversion.
;                   chars       - character list of all decimal digit characters
;
; Shared Variables: None.
; Global Variables: None.
;
; Input:            None.
; Output:           None.
;
; Error Handling:   If the number to be converted is less than -9999 or more 
;                   than 99999 the carry flag is set and a meaningless value is ;                   returned.
;
; Registers Used:   flags, AX, BX, CX, DX, SI
; Stack Depth:      0 words
;
; Algorithms:       Repeatedly divide by powers of 10 and get the remainders
;                   (which are the BCD digits). Then turn these into decimal form
;                   and add any necessary negative signs.
;
; Data Structures:  List of characters for string creation.
;
; Known Bugs:       None.
; Limitations:      There is a maximum of 5 digits, including a negative sign. 
;                   This limits a lot of otherwise possible values.
;
; Revision History: 10/10/16   Jennifer Du      initial revision
;
;
; Pseudo Code
;
; def Dec2String(arg):
;
;   {check for proper input: 16 bits, only 1s and 0s}
;
;   twos = 1            // this initializes 2^0
;   result = 0          // this initializes the result, so we can add to it
;   flipped = 0         // this initializes the flipped version of the number
;   tens = 1            // this keeps track of what power of ten we are using
;   chars = [character form of all the decimal digits]   
;
;   sign = arg / 1000,0000,0000,0000 // this gives us the first digit (and sign)
;
;   if (sign):
;       while (arg > 0):
;           digit = 1 - (arg % 10)                   // flip the rightmost digit
;           flipped = flipped + (digit * tens)       // place flipped digit first
;           tens *= 10                               // update tens to add 
;                                     //subsesequent digits to front
;           arg = arg / 10                  // divide to focus on the next digit up
;       
;       for (int i = 0; i < 15; i++):                   
;           result = result + 2^i * (flipped % 10)       // multiply last digit 
;                                                         // by appropriate 2^x
;           flipped = flipped / 10                // expose next digit by dividing
;       result = result + 1                     // then add 1 to dec. result
;
;       if (result > 9999):                     // check if result exceeds 5 dig
;           return ERROR
;       result = result.toString()
;       result = '-' + result                   // add negative sign to string
;       
;   else:                                       // case of positive number
;       while (arg > 0):                        
;           result = result + twos * (arg % 10) // adding multiple of 2^x  
;           arg = arg / 10                      // expose next digit
;           twos = twos * 2                     // update power of 2
;       if (result > 99999):
;           return ERROR
;
;       result = result.toString()              // turn digits into characters
;
;   return result + "/n"                        // add null character
;
;
;



; Hex2String
;
;
; Description:      This function converts the 16-bit number n to a string 
;                   containing its decimal representation stored at a. The
;                   function is passed a 16-bit unsigned value (n) to convert to
;                   hexadecimal (at most 4 digits) and store as a string. The
;                   string will contain the <null> terminated hexadecimal 
;                   representation of the value in ASCII. The resulting string is 
;                   stored starting at the memory location indicated by the passed 
;                   address (a). The number (n) is passed in AX by value. The 
;                   address (a) is passed in SI by value. 
;
; Operation:        This function starts by portioning the 16-bit number into 4 
;                   4-bit numbers. Then these 4-bit numbers are converted into 
;                   their decimal value, and turned into their corresponding 
;                   hexadecimal character. 
;
; Arguments:        AX - unsigned binary value to convert to string
;                   SI - address at which the resulting string will be stored
;
; Return Values:    SI - address storing the converted string.
;
; Local Variables:  arg (AX)    - passed unsigned binary value to convert.
;                   part        - 4-digit chunk of the binary number.
;                   digit       - decimal representation of part.
;                   tens (CX)   - current power of 10 being computed.
;                   twos        - current power of 2 being computed.
;                   flipped     - flipped binary value.
;                   result (BX) - result from conversion.
;                   chars       - list of hexadecimal characters.
;
; Shared Variables: None.
; Global Variables: None.
;
; Input:            None.
; Output:           None.
;
; Error Handling:   If the number to be converted is greater than 16 bits the 
;                   error flag is raised.
;
; Registers Used:   flags, AX, BX, CX, DX, SI
; Stack Depth:      0 words
;
; Algorithms:       Divide the number into 4-bit parts and convert them into their 
;                   decimal value. Then match up these values to their hexadecimal
;                   string representation
;
; Data Structures:  List of hexadecimal characters.
;
; Known Bugs:       None.
;
; Limitations:      Does not output negative numbers.
;
; Revision History: 10/10/16   Jennifer Du      initial revision
;
;
; Pseudo Code
;
; def Hex2String(arg):
;
;   {check for proper input: 16 bits, only 1s and 0s}
;
;       // here we intialize the result string, which will be appended to later on
;   result = ''
;   chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 
;       'd', 'e']
;
;       // we will repeat this process 4 times, once for each group of 4 digits
;   for (int i = 0; i < 3; i++):
;               
;       twos = 1               // reset the twos counter to 2 to the power of 0
;       part = arg % 10000     // pick the smallest 4 digits
;       digit = 0              // initialize decimal representation of current set
;       while (part > 0):                       
;           digit += twos * part % 10           // take smallest digit, multiply 
;                                               // by current power of 2
;           part = part / 10                    // decrease p to get next digit
;           twos = twos * 2                     // get next power of 2
;       arg = arg / 10000     // take away smallest 4 digits of the input number
;       result = chars[digit] + result          // add the character to beginning 
;    endfor                                     // of string
;
;    return (result + "/n")   // add null character and return
;
;
;

